<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Dictionary" id="1" localization="8" tooltip="This box contains a Python script that allows the robot to look for the definition of the word passed as parameter on the dictionary." x="205" y="55"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import qi
import sys
sys.path.append("/data/home/nao/.local/share/PackageManager/apps/wordtools/libs")
from naoqi import ALProxy
from PyDictionary import PyDictionary
from mtranslate import translate


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy("ALMemory")
        self.al = ALProxy("ALAutonomousLife")
        self.animated_speech = ALProxy("ALAnimatedSpeech")
        try:
            self.voice_speed = "\\RSPD=" + str(self.memory.getData("CAIR/voice_speed")) + "\\"
        except:
            self.voice_speed = "\\RSPD=80\\"
        self.language = self.memory.getData("CAIR/language")
        self.configuration = {"bodyLanguageMode": "contextual"}


    def setAutonomousAbilities(self, blinking, background, awareness, listening, speaking):
        self.al.setAutonomousAbilityEnabled("AutonomousBlinking", blinking)
        self.al.setAutonomousAbilityEnabled("BackgroundMovement", background)
        self.al.setAutonomousAbilityEnabled("BasicAwareness", awareness)
        self.al.setAutonomousAbilityEnabled("ListeningMovement", listening)
        self.al.setAutonomousAbilityEnabled("SpeakingMovement", speaking)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        # Check if the parameter is in memory
        to_define = str(self.memory.getData("CAIR/dictionary"))
        self.logger.info("word to define: " + str(to_define))
        to_define = to_define.strip()
        to_define_en = translate(str(to_define), 'en').encode("utf-8")
        self.logger.info("translated word: " + to_define_en)

        dictionary = PyDictionary()
        try:
            if dictionary.meaning(to_define_en):
                definition = str(dictionary.meaning(to_define_en)['Noun'][0])
                self.logger.info(definition)
                if self.language == "it":
                    definition_it = translate(definition, 'it').encode('utf-8')
                    outcome = "La definizione di " + to_define + " Ã¨: " + definition_it
                else:
                    outcome = "The definition of " + to_define + " is: " + definition
                self.animated_speech.say(self.voice_speed + outcome, self.configuration)
            else:
                raise Exeption("No definition")
        except:
            if self.language == "it":
                outcome = "Mi dispiace, non riesco a trovare la definizione di " + to_define + " sul dizionario."
            else:
                outcome = "I'm sorry, I can't find a definition for " + to_define + " on the dictionary."
            self.animated_speech.say(self.voice_speed + outcome, self.configuration)

        self.memory.removeData("CAIR/dictionary")
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>