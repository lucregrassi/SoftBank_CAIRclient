<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Translator" id="1" localization="8" tooltip="This box contains a Python script that makes the robot able to translate sentences from English to any of the languages installed on the robot." x="184" y="53"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import qi
import sys
sys.path.append("/data/home/nao/.local/share/PackageManager/apps/wordtools/libs")
from naoqi import ALProxy
import os
import re
from mtranslate import translate
from unidecode import unidecode
import ssl
import random
import codecs

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy("ALMemory")
        self.tts = ALProxy("ALTextToSpeech")
        self.sASR = ALProxy("ASR2")
        self.al = ALProxy("ALAutonomousLife")
        self.speech_reco_event = "Audio/RecognizedWords"
        self.animated_speech = ALProxy("ALAnimatedSpeech")
        try:
            self.voice_speed = "\\RSPD=" + str(self.memory.getData("CAIR/voice_speed")) + "\\"
        except:
            self.voice_speed = "\\RSPD=80\\"
        self.language = self.memory.getData("CAIR/language")
        self.configuration = {"bodyLanguageMode": "contextual"}

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        # ssl._create_default_https_context = ssl._create_unverified_context
        installed_languages = self.tts.getAvailableLanguages()
        available_languages = ['Arabic', 'Brazilian', 'Chinese', 'Czech', 'Danish', 'Dutch', 'English', 'Finnish', 'French', 'German', 'Greek', 'Italian', 'Japanese', 'Korean', 'Norwegian', 'Polish', 'Portuguese','Russian',  'Spanish', 'Swedish', 'Turkish']
        self.logger.info(str(installed_languages))

        # Check if the text to translate is in memory
        try:
            to_translate = str(self.memory.getData("CAIR/translate_text"))
            self.logger.info("sentence to translate: " + to_translate)
            to_translate = to_translate.strip()
            if to_translate == "None":
                raise Exception("No data")
        # If there is no parameter, ask for it
        except:
            if self.language == "it":
                to_say = "Che cosa vorresti tradurre?"
                speech_reco_lan = "Italian"
            else:
                to_say = "What would you like me to translate?"
                speech_reco_lan = "English"
            self.animated_speech.say(self.voice_speed + to_say, self.configuration)

            # Start speech recognition
            self.sASR.startReco(speech_reco_lan, False, True)

            start_time_silence = time.time() + 1800

            sentence = ""
            reco_speech = self.memory.getData(self.speech_reco_event)
            self.logger.info(str(reco_speech))
            stop = False

            while True:
                time.sleep(0.1)
                while not reco_speech:
                    time.sleep(0.1)
                    if sentence and time.time() - start_time_silence > 0.1:
                        self.sASR.stopReco()
                        stop = True
                        break
                    reco_speech = self.memory.getData(self.speech_reco_event)
                    print reco_speech
                sys.stdout.flush()
                if stop:
                    break
                if sentence == "":
                    sep = ""
                else:
                    sep = " "

                if reco_speech:
                    sentence = sentence + sep + reco_speech[0][0]
                start_time_silence = time.time()
                self.memory.insertData(self.speech_reco_event, [])
                reco_speech = self.memory.getData(self.speech_reco_event)

                exit_keywords = ["stop", "exit", "quit"]
                if any(keyword in sentence.lower() for keyword in exit_keywords):
                    self.onInput_onStop()
                    sys.exit(0)

            self.logger.info(str(sentence))
            self.memory.insertData(self.speech_reco_event, [])
            self.memory.insertData("CAIR/translate_text", str(sentence))
            to_translate = self.memory.getData("CAIR/translate_text")

        try:
            dest_language = str(self.memory.getData("CAIR/translate_lan"))
            self.logger.info("language: " + dest_language)
            dest_language = dest_language.strip()
            if dest_language == "None":
                raise Exception("No data")
            else:
                translated_lan = translate(str(dest_language), 'en').encode("utf-8")
                self.logger.info("translated language: " + translated_lan)

        # If there is no parameter, ask for it
        except:
            if language == "it":
                to_say = "In quale lingua vuoi tradurre?"
                speech_reco_lan = "Italian"
            else:
                to_say = "In which language do you want me to translate?"
                speech_reco_lan = "English"

            self.animated_speech.say(self.voice_speed + to_say, self.configuration)

            # Start speech recognition
            self.sASR.startReco(speech_reco_lan, False, True)
            start_time_silence = time.time() + 1800

            sentence = ""
            reco_speech = self.memory.getData(self.speech_reco_event)
            self.logger.info(str(reco_speech))
            stop = False

            while True:
                time.sleep(0.1)
                while not reco_speech:
                    time.sleep(0.1)
                    if sentence and time.time() - start_time_silence > 0.1:
                        self.sASR.stopReco()
                        stop = True
                        break
                    reco_speech = self.memory.getData(self.speech_reco_event)
                    print reco_speech
                sys.stdout.flush()
                if stop:
                    break
                if sentence == "":
                    sep = ""
                else:
                    sep = " "

                if reco_speech:
                    sentence = sentence + sep + reco_speech[0][0]
                start_time_silence = time.time()
                self.memory.insertData(self.speech_reco_event, [])
                reco_speech = self.memory.getData(self.speech_reco_event)

                exit_keywords = ["stop", "exit", "quit"]
                if any(keyword in sentence.lower() for keyword in exit_keywords):
                    self.onInput_onStop()
                    sys.exit(0)

            self.logger.info(str(sentence))
            self.memory.insertData(self.speech_reco_event, [])
            dest_language = str(sentence)
            translated_lan = translate(dest_language, 'en').encode("utf-8")
            self.logger.info("translated language: " + translated_lan)

        translated_lan = translated_lan.strip().capitalize()

        if translated_lan not in installed_languages:
            if translated_lan in available_languages:
                if self.language == "it":
                    to_say = "Mi dispiace, la lingua " + dest_language + " non Ã¨ installata."
                else:
                    to_say = "I'm sorry, " + dest_language + " language is not installed."
                self.animated_speech.say(self.voice_speed + to_say, self.configuration)
            else:
                if self.language == "it":
                    to_say = "Mi dispiace, non so parlare " + dest_language
                else:
                    to_say = "I'm sorry, I can't speak " + dest_language
                self.animated_speech.say(self.voice_speed + to_say, self.configuration)
        else:
            languages_mapping = {'Arabic': 'ar', 'Brazilian': '-', 'Chinese': 'zh-TW', 'Czech': 'cs', 'Danish': 'da',
                                 'Dutch': 'nl', 'English': 'en', 'Finnish': 'fi', 'French': 'fr', 'German': 'de',
                                 'Greek': 'el', 'Italian': 'it', 'Japanese': 'ja', 'Korean': 'ko', 'Norwegian': 'no',
                                 'Polish': 'pl', 'Portuguese': 'pt', 'Russian': 'ru', 'Spanish': 'es', 'Swedish': 'sv',
                                 'Turkish': 'tr'}
            if languages_mapping[translated_lan] == '-':
                if language == "it":
                    to_say = "Mi dispiace, non so tradurre in " + dest_language
                else:
                    to_say = "I'm sorry I can't translate in " + dest_language
                self.animated_speech.say(self.voice_speed + to_say, self.configuration)
            else:
                if language == "it":
                    to_say = to_translate + " in " + dest_language + "si dice: "
                else:
                    to_say = "The " + dest_language + " for " + to_translate + " is: "
                self.animated_speech.say(self.voice_speed + to_say, self.configuration)
                self.tts.setParameter("speed", 85)
                try:
                    translation = translate(to_translate, languages_mapping[translated_lan]).encode('utf-8')
                    self.logger.info("translation: " + translation)
                    self.tts.say(translation, translated_lan)
                except:
                    pass

                if self.language == "it":
                    self.tts.setLanguage("Italian")
                else:
                    self.tts.setLanguage("English")

        self.memory.removeData("CAIR/translate_text")
        self.memory.removeData("CAIR/translate_lan")
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>