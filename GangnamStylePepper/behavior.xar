<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s project. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram scale="94.3874"><Box name="Gangnam Style" id="3" localization="8" tooltip="Last modification:&#x0A;&#x0A;16/05/2012&#x0A;&#x0A;Softening the dance to cope with v4 hardware.&#x0A;&#x0A;=================&#x0A;Nao dances on Vangelis" x="220" y="46"><bitmap>media/images/box/movement/dance.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="robotHasFallen" type="0" type_size="1" nature="4" stm_value_name="robotHasFallen" inner="1" tooltip="robotHasFallen desc" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /><Timeline enable="1" fps="1" start_frame="1" end_frame="-1" size="-1"><BehaviorLayer name="dance"><BehaviorKeyframe name="Stand Up" index="1"><Diagram><Box name="Stop" id="1" localization="8" tooltip="Stop the parent timeline at the current frame index.&#x0A;&#x0A;!!Warning!! This box does not stop the behavior! It is only the timeline which will&#x0A;stop playing, the keyframes and boxes will still be running." x="156" y="37"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onInput_onStop(self):
        self.stopTimelineParent()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStop" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" /></Box><Box name="GotoDance" id="2" localization="8" tooltip="Jump to the frame name set in parameters and stop the parent timeline.&#x0A;&#x0A;!!Warning!! This box does not stop the behavior! It is only the timeline which will&#x0A;stop playing, the keyframes and boxes will still be running." x="335" y="221"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onInput_onGo(self):
        self.gotoAndStopParent(self.getParameter("Frame name"))]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onGo" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" /><Parameter name="Frame name" inherits_from_parent="0" content_type="3" value="Dance" default_value="" custom_choice="0" tooltip="Name of the frame you want to go to." id="3" /></Box><Box name="Goto Posture" id="7" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="166" y="156"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="4" /><Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="5" /><Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6"><Choice value="Crouch" /><Choice value="LyingBack" /><Choice value="LyingBelly" /><Choice value="Sit" /><Choice value="SitRelax" /><Choice value="StandInit" /><Choice value="Stand" /><Choice value="StandZero" /></Parameter><Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" /><Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" /><Resource name="All motors" type="Lock" timeout="0" /><Resource name="Stiffness" type="Lock" timeout="0" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /><Link inputowner="2" indexofinput="2" outputowner="7" indexofoutput="5" /><Link inputowner="0" indexofinput="5" outputowner="7" indexofoutput="4" /><Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="Dance" index="13"><Diagram><Box name="Gangnam" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="351" y="25"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="770"><BehaviorLayer name="leds"><BehaviorKeyframe name="Gangnam Style" index="9"><Diagram><Box name="EyesOnOff" id="17" localization="8" tooltip="tags:&#x0A;LED" x="87" y="47"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = self.getParameter('Timing')

        self.log(self.getParameter('Eyes'))

        if(self.getParameter('Eyes') == 'On'):
            nColor = 0xFFFFFF
        else:
            nColor = 0x000000

        ALLeds.fadeRGB("FaceLeds", nColor, rDuration);

        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Parameter name="Eyes" inherits_from_parent="0" content_type="3" value="On" default_value="On" custom_choice="0" tooltip="" id="5"><Choice value="On" /><Choice value="Off" /></Parameter><Parameter name="Timing" inherits_from_parent="0" content_type="2" value="0.5" default_value="0.5" min="0.05" max="10.05" tooltip="" id="6" /><Resource name="Left eye leds" type="Lock" timeout="0" /><Resource name="Right eye leds" type="Lock" timeout="0" /></Box><Link inputowner="17" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe></BehaviorLayer><BehaviorLayer name="LED blink"><BehaviorKeyframe name="keyframe136" index="136"><Diagram><Box name="flash" id="4" localization="8" tooltip="This box makes the robot blink once." x="133" y="23"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xff0090, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xff0090, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xff0090, rDuration)

        time.sleep(0.2)
        self.leds.post.fadeRGB("BrainLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xffffff, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xffffff, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="keyframe136_copy" index="154"><Diagram><Box name="flash" id="4" localization="8" tooltip="This box makes the robot blink once." x="109" y="31"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xff0090, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xff0090, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xff0090, rDuration)

        time.sleep(0.2)
        self.leds.post.fadeRGB("BrainLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xffffff, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xffffff, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="keyframe136_copy_copy" index="166"><Diagram><Box name="flash" id="4" localization="8" tooltip="This box makes the robot blink once." x="92" y="29"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xff0090, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xff0090, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xff0090, rDuration)

        time.sleep(0.2)
        self.leds.post.fadeRGB("BrainLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xffffff, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xffffff, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="keyframe136_copy_copy_copy" index="178"><Diagram><Box name="flash" id="4" localization="8" tooltip="This box makes the robot blink once." x="110" y="29"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xff0090, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xff0090, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xff0090, rDuration)

        time.sleep(0.2)
        self.leds.post.fadeRGB("BrainLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xffffff, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xffffff, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="keyframe136_copy_copy_copy_copy" index="316"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="122" y="18"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xff0090, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xff0090, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xff0090, rDuration)

        time.sleep(0.2)
        self.leds.post.fadeRGB("BrainLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xffffff, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xffffff, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="keyframe136_copy_copy_copy_copy_copy" index="334"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="105" y="40"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xff0090, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xff0090, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xff0090, rDuration)

        time.sleep(0.2)
        self.leds.post.fadeRGB("BrainLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xffffff, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xffffff, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="keyframe136_copy_copy_copy_copy_copy_copy" index="346"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="191" y="67"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xff0090, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xff0090, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xff0090, rDuration)

        time.sleep(0.2)
        self.leds.post.fadeRGB("BrainLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xffffff, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xffffff, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="keyframe136_copy_copy_copy_copy_copy_copy_copy" index="358"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="167" y="56"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xff0090, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xff0090, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xff0090, rDuration)

        time.sleep(0.2)
        self.leds.post.fadeRGB("BrainLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xffffff, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xffffff, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="keyframe136_copy_copy_copy_copy_copy_copy_copy_copy" index="504"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="200" y="66"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xff0090, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xff0090, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xff0090, rDuration)

        time.sleep(0.2)
        self.leds.post.fadeRGB("BrainLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xffffff, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xffffff, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="keyframe136_copy_copy_copy_copy_copy_copy_copy_copy_copy" index="518"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="184" y="53"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xff0090, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xff0090, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xff0090, rDuration)

        time.sleep(0.2)
        self.leds.post.fadeRGB("BrainLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xffffff, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xffffff, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="keyframe136_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy" index="529"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="171" y="49"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xff0090, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xff0090, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xff0090, rDuration)

        time.sleep(0.2)
        self.leds.post.fadeRGB("BrainLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xffffff, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xffffff, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="keyframe136_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy" index="542"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="141" y="38"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xff0090, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xff0090, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xff0090, rDuration)

        time.sleep(0.2)
        self.leds.post.fadeRGB("BrainLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xffffff, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xffffff, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="keyframe136_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy" index="684"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="120" y="29"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xff0090, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xff0090, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xff0090, rDuration)

        time.sleep(0.2)
        self.leds.post.fadeRGB("BrainLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xffffff, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xffffff, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="keyframe136_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy" index="700"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="126" y="37"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xff0090, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xff0090, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xff0090, rDuration)

        time.sleep(0.2)
        self.leds.post.fadeRGB("BrainLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xffffff, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xffffff, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="keyframe136_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy" index="711"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="73" y="27"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xff0090, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xff0090, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xff0090, rDuration)

        time.sleep(0.2)
        self.leds.post.fadeRGB("BrainLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xffffff, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xffffff, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="last" index="722"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="182" y="61"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xff0090, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xff0090, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xff0090, rDuration)

        time.sleep(0.2)
        self.leds.post.fadeRGB("BrainLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0xffffff, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0xffffff, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0xffffff, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe></BehaviorLayer><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="41" value="-22.5027" /><Key frame="47" value="7.15342" /><Key frame="53" value="-22.5027" /><Key frame="59" value="7.15342" /><Key frame="65" value="-22.5027" /><Key frame="71" value="7.15342" /><Key frame="77" value="-22.5027" /><Key frame="83" value="7.15342" /><Key frame="89" value="-22.5027" /><Key frame="95" value="7.15342" /><Key frame="101" value="-22.5027" /><Key frame="107" value="7.15342" /><Key frame="113" value="-22.5027" /><Key frame="119" value="7.15342" /><Key frame="125" value="-22.5027" /><Key frame="131" value="7.15342" /><Key frame="137" value="-22.5027" /><Key frame="143" value="7.15342" /><Key frame="149" value="-22.5027" /><Key frame="155" value="7.15342" /><Key frame="161" value="-22.5027" /><Key frame="167" value="7.15342" /><Key frame="173" value="-22.5027" /><Key frame="179" value="7.15342" /><Key frame="185" value="-22.5027" /><Key frame="191" value="7.15342" /><Key frame="197" value="-22.5027" /><Key frame="203" value="7.15342" /><Key frame="209" value="-22.5027" /><Key frame="215" value="7.15342" /><Key frame="221" value="-22.5027" /><Key frame="233" value="7.15342" /><Key frame="239" value="-22.5027" /><Key frame="245" value="7.15342" /><Key frame="251" value="-22.5027" /><Key frame="257" value="7.15342" /><Key frame="263" value="-22.5027" /><Key frame="269" value="7.15342" /><Key frame="275" value="-22.5027" /><Key frame="281" value="7.15342" /><Key frame="287" value="-22.5027" /><Key frame="293" value="7.15342" /><Key frame="299" value="-22.5027" /><Key frame="305" value="7.15342" /><Key frame="311" value="-22.5027" /><Key frame="317" value="7.15342" /><Key frame="323" value="-22.5027" /><Key frame="329" value="7.15342" /><Key frame="335" value="-22.5027" /><Key frame="341" value="7.15342" /><Key frame="347" value="-22.5027" /><Key frame="353" value="7.15342" /><Key frame="359" value="-22.5027" /><Key frame="365" value="1.09896" /><Key frame="371" value="-15.4392" /><Key frame="376" value="-3.2737" /><Key frame="398" value="-3.2737" /><Key frame="402" value="-5.46755" /><Key frame="412" value="-18.403" /><Key frame="421" value="4.83944" /><Key frame="427" value="-19.0656" /><Key frame="433" value="4.83944" /><Key frame="439" value="-19.0656" /><Key frame="445" value="4.83944" /><Key frame="451" value="-19.0656" /><Key frame="457" value="4.83944" /><Key frame="463" value="-19.0656" /><Key frame="469" value="4.83944" /><Key frame="475" value="-19.0656" /><Key frame="481" value="4.83944" /><Key frame="487" value="-19.0656" /><Key frame="493" value="4.83944" /><Key frame="499" value="-19.0655" /><Key frame="511" value="-19.0656" /><Key frame="517" value="4.83944" /><Key frame="523" value="-19.0656" /><Key frame="529" value="4.83944" /><Key frame="535" value="-19.0656" /><Key frame="541" value="4.83944" /><Key frame="547" value="-19.0656" /><Key frame="553" value="4.83944" /><Key frame="559" value="-19.0656" /><Key frame="565" value="4.83944" /><Key frame="571" value="-19.0656" /><Key frame="577" value="4.83944" /><Key frame="583" value="-19.0656" /><Key frame="589" value="6.17187" /><Key frame="595" value="-20.1872" /><Key frame="601" value="7.15342" /><Key frame="607" value="-22.5027" /><Key frame="613" value="7.15342" /><Key frame="619" value="-22.5027" /><Key frame="625" value="7.15342" /><Key frame="631" value="-22.5027" /><Key frame="637" value="7.15342" /><Key frame="643" value="-22.5027" /><Key frame="649" value="7.15342" /><Key frame="655" value="-22.5027" /><Key frame="661" value="7.15342" /><Key frame="667" value="-22.5027" /><Key frame="673" value="7.15342" /><Key frame="679" value="-22.5027" /><Key frame="685" value="7.15342" /><Key frame="691" value="-22.5027" /><Key frame="697" value="7.15342" /><Key frame="703" value="-22.5027" /><Key frame="709" value="7.15342" /><Key frame="715" value="-22.5027" /><Key frame="721" value="7.15342" /><Key frame="727" value="-22.5027" /><Key frame="733" value="7.15342" /><Key frame="739" value="-22.5027" /><Key frame="745" value="7.15342" /><Key frame="751" value="-22.5027" /><Key frame="757" value="7.15342" /><Key frame="763" value="-19.4265" /><Key frame="770" value="-22.5027" /></ActuatorCurve><ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0"><Key frame="41" value="5.2711" /><Key frame="47" value="4.48007" /><Key frame="53" value="5.2711" /><Key frame="59" value="4.48007" /><Key frame="65" value="5.2711" /><Key frame="71" value="4.48007" /><Key frame="77" value="5.2711" /><Key frame="83" value="4.48007" /><Key frame="89" value="5.2711" /><Key frame="95" value="4.48007" /><Key frame="101" value="5.2711" /><Key frame="107" value="4.48007" /><Key frame="113" value="5.2711" /><Key frame="125" value="5.2711" /><Key frame="131" value="2.55127" /><Key frame="137" value="5.2711" /><Key frame="143" value="2.55127" /><Key frame="149" value="5.2711" /><Key frame="155" value="2.55127" /><Key frame="161" value="5.2711" /><Key frame="167" value="2.55127" /><Key frame="173" value="5.2711" /><Key frame="179" value="2.55127" /><Key frame="185" value="5.2711" /><Key frame="191" value="2.55127" /><Key frame="197" value="5.2711" /><Key frame="203" value="2.55127" /><Key frame="209" value="5.2711" /><Key frame="215" value="2.55127" /><Key frame="221" value="5.2711" /><Key frame="233" value="2.55127" /><Key frame="239" value="5.2711" /><Key frame="245" value="2.55127" /><Key frame="251" value="5.2711" /><Key frame="257" value="2.55127" /><Key frame="263" value="5.2711" /><Key frame="269" value="2.55127" /><Key frame="275" value="5.2711" /><Key frame="281" value="2.55127" /><Key frame="287" value="5.2711" /><Key frame="293" value="2.55127" /><Key frame="299" value="5.2711" /><Key frame="305" value="2.55127" /><Key frame="311" value="5.2711" /><Key frame="317" value="2.55127" /><Key frame="323" value="5.2711" /><Key frame="329" value="2.55127" /><Key frame="335" value="5.2711" /><Key frame="341" value="2.55127" /><Key frame="347" value="5.2711" /><Key frame="353" value="2.55127" /><Key frame="359" value="5.2711" /><Key frame="367" value="5.44688" /><Key frame="376" value="5.79845" /><Key frame="398" value="5.79845" /><Key frame="402" value="5.71056" /><Key frame="415" value="-18.6354" /><Key frame="421" value="-22.0632" /><Key frame="427" value="-18.6354" /><Key frame="433" value="-22.0632" /><Key frame="439" value="-18.6354" /><Key frame="445" value="-22.0632" /><Key frame="451" value="-18.6354" /><Key frame="457" value="-22.0632" /><Key frame="463" value="-18.6354" /><Key frame="469" value="-22.0632" /><Key frame="475" value="-18.6354" /><Key frame="481" value="-22.0632" /><Key frame="487" value="-18.6354" /><Key frame="493" value="-22.0632" /><Key frame="499" value="-18.6354" /><Key frame="511" value="6.24271" /><Key frame="517" value="6.41851" /><Key frame="523" value="6.24271" /><Key frame="529" value="6.41851" /><Key frame="535" value="6.24271" /><Key frame="541" value="6.41851" /><Key frame="547" value="6.24271" /><Key frame="553" value="6.41851" /><Key frame="559" value="6.24271" /><Key frame="565" value="6.41851" /><Key frame="571" value="6.24271" /><Key frame="577" value="6.41851" /><Key frame="583" value="6.24271" /><Key frame="601" value="2.55127" /><Key frame="607" value="5.2711" /><Key frame="613" value="2.55127" /><Key frame="619" value="5.2711" /><Key frame="625" value="2.55127" /><Key frame="631" value="5.2711" /><Key frame="637" value="2.55127" /><Key frame="643" value="5.2711" /><Key frame="649" value="2.55127" /><Key frame="655" value="5.2711" /><Key frame="661" value="2.55127" /><Key frame="667" value="5.2711" /><Key frame="673" value="2.55127" /><Key frame="679" value="5.2711" /><Key frame="685" value="2.55127" /><Key frame="691" value="5.2711" /><Key frame="697" value="2.55127" /><Key frame="703" value="5.2711" /><Key frame="709" value="2.55127" /><Key frame="715" value="5.2711" /><Key frame="721" value="2.55127" /><Key frame="727" value="5.2711" /><Key frame="733" value="2.55127" /><Key frame="739" value="5.2711" /><Key frame="745" value="2.55127" /><Key frame="751" value="5.2711" /><Key frame="757" value="2.55127" /><Key frame="763" value="4.83163" /><Key frame="770" value="5.2711" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="41" value="-87.5378" /><Key frame="47" value="-85.3405" /><Key frame="53" value="-87.5378" /><Key frame="59" value="-85.3405" /><Key frame="65" value="-87.5378" /><Key frame="71" value="-85.3405" /><Key frame="77" value="-87.5378" /><Key frame="83" value="-85.3405" /><Key frame="89" value="-87.5378" /><Key frame="95" value="-85.3405" /><Key frame="101" value="-87.5378" /><Key frame="107" value="-85.3405" /><Key frame="113" value="-87.5378" /><Key frame="119" value="-61.8" /><Key frame="125" value="-20.0417" /><Key frame="131" value="-31.5555" /><Key frame="137" value="-20.0417" /><Key frame="143" value="-31.5555" /><Key frame="149" value="-20.0417" /><Key frame="155" value="-31.5555" /><Key frame="161" value="-20.0417" /><Key frame="167" value="-31.5555" /><Key frame="173" value="-20.0417" /><Key frame="179" value="-31.5555" /><Key frame="185" value="-20.0417" /><Key frame="191" value="-31.5555" /><Key frame="197" value="-20.0417" /><Key frame="203" value="-31.5555" /><Key frame="209" value="-20.0417" /><Key frame="215" value="-31.5555" /><Key frame="221" value="-20.0417" /><Key frame="227" value="-36.6" /><Key frame="233" value="-25.7499" /><Key frame="239" value="-24.7831" /><Key frame="245" value="-25.7499" /><Key frame="251" value="-24.7831" /><Key frame="257" value="-25.7499" /><Key frame="263" value="-24.7831" /><Key frame="269" value="-25.7499" /><Key frame="275" value="-24.7831" /><Key frame="281" value="-25.7499" /><Key frame="287" value="-24.7831" /><Key frame="293" value="-25.7499" /><Key frame="299" value="-24.7831" /><Key frame="305" value="-25.7499" /><Key frame="311" value="-24.7831" /><Key frame="317" value="-25.7499" /><Key frame="323" value="-24.7831" /><Key frame="329" value="-25.7499" /><Key frame="335" value="-24.7831" /><Key frame="341" value="-25.7499" /><Key frame="347" value="-24.7831" /><Key frame="353" value="-25.7499" /><Key frame="359" value="-24.7831" /><Key frame="367" value="-71.2" /><Key frame="371" value="-68.8" /><Key frame="386" value="-32.1223" /><Key frame="398" value="-25.3104" /><Key frame="402" value="-25.3104" /><Key frame="409" value="-49.217" /><Key frame="415" value="-87.5378" /><Key frame="421" value="-73.6509" /><Key frame="427" value="-87.5378" /><Key frame="433" value="-73.6509" /><Key frame="439" value="-87.5378" /><Key frame="445" value="-73.6509" /><Key frame="451" value="-87.5378" /><Key frame="457" value="-73.6509" /><Key frame="463" value="-87.5378" /><Key frame="469" value="-73.6509" /><Key frame="475" value="-87.5378" /><Key frame="481" value="-73.6509" /><Key frame="487" value="-87.5378" /><Key frame="493" value="-73.6509" /><Key frame="499" value="-87.5378" /><Key frame="505" value="-68.2016" /><Key frame="511" value="-87.3668" /><Key frame="517" value="-73.392" /><Key frame="523" value="-87.3668" /><Key frame="529" value="-73.392" /><Key frame="535" value="-87.3668" /><Key frame="541" value="-73.392" /><Key frame="547" value="-87.3668" /><Key frame="553" value="-73.392" /><Key frame="559" value="-87.3668" /><Key frame="565" value="-73.392" /><Key frame="571" value="-87.3668" /><Key frame="577" value="-73.392" /><Key frame="583" value="-87.3668" /><Key frame="592" value="-87.4499" /><Key frame="601" value="-25.7499" /><Key frame="607" value="-24.7831" /><Key frame="613" value="-25.7499" /><Key frame="619" value="-24.7831" /><Key frame="625" value="-25.7499" /><Key frame="631" value="-24.7831" /><Key frame="637" value="-25.7499" /><Key frame="643" value="-24.7831" /><Key frame="649" value="-25.7499" /><Key frame="655" value="-24.7831" /><Key frame="661" value="-25.7499" /><Key frame="667" value="-24.7831" /><Key frame="673" value="-25.7499" /><Key frame="679" value="-24.7831" /><Key frame="685" value="-2" /><Key frame="691" value="-30.1445" /><Key frame="697" value="-2" /><Key frame="703" value="-45.7061" /><Key frame="709" value="-2" /><Key frame="715" value="-30.1445" /><Key frame="721" value="-2" /><Key frame="727" value="-45.7061" /><Key frame="733" value="-2" /><Key frame="739" value="-30.1445" /><Key frame="745" value="-2" /><Key frame="751" value="-45.0861" /><Key frame="757" value="-2" /><Key frame="763" value="-24.6952" /><Key frame="770" value="-29.1777" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="41" value="-28.2" /><Key frame="47" value="-13.5377" /><Key frame="53" value="-28.2" /><Key frame="59" value="-13.5377" /><Key frame="65" value="-28.2" /><Key frame="71" value="-13.5377" /><Key frame="77" value="-28.2" /><Key frame="83" value="-13.5377" /><Key frame="89" value="-28.2" /><Key frame="95" value="-13.5377" /><Key frame="101" value="-28.2" /><Key frame="107" value="-13.5377" /><Key frame="113" value="-28.2" /><Key frame="119" value="-48.0792" /><Key frame="125" value="-60.9066" /><Key frame="131" value="21.7996" /><Key frame="137" value="-60.9066" /><Key frame="143" value="21.7996" /><Key frame="149" value="-60.9066" /><Key frame="155" value="21.7996" /><Key frame="161" value="-60.9066" /><Key frame="167" value="21.7996" /><Key frame="173" value="-60.9066" /><Key frame="179" value="21.7996" /><Key frame="185" value="-60.9066" /><Key frame="191" value="21.7996" /><Key frame="197" value="-60.9066" /><Key frame="203" value="21.7996" /><Key frame="209" value="-60.9066" /><Key frame="215" value="21.7996" /><Key frame="221" value="-60.9066" /><Key frame="233" value="-45.9698" /><Key frame="239" value="-45.4424" /><Key frame="245" value="-45.9698" /><Key frame="251" value="-45.4424" /><Key frame="257" value="-45.9698" /><Key frame="263" value="-45.4424" /><Key frame="269" value="-45.9698" /><Key frame="275" value="-45.4424" /><Key frame="281" value="-45.9698" /><Key frame="287" value="-45.4424" /><Key frame="293" value="-45.9698" /><Key frame="299" value="-45.4424" /><Key frame="305" value="-45.9698" /><Key frame="311" value="-45.4424" /><Key frame="317" value="-45.9698" /><Key frame="323" value="-45.4424" /><Key frame="329" value="-45.9698" /><Key frame="335" value="-45.4424" /><Key frame="341" value="-45.9698" /><Key frame="347" value="-45.4424" /><Key frame="353" value="-45.9698" /><Key frame="359" value="-45.4424" /><Key frame="367" value="-65.2" /><Key frame="376" value="-65.0423" /><Key frame="398" value="-68.6458" /><Key frame="402" value="-68.2064" /><Key frame="409" value="-34.2802" /><Key frame="415" value="-8.44001" /><Key frame="421" value="-8.08845" /><Key frame="427" value="-8.44001" /><Key frame="433" value="-8.08845" /><Key frame="439" value="-8.44001" /><Key frame="445" value="-8.08845" /><Key frame="451" value="-8.44001" /><Key frame="457" value="-8.08845" /><Key frame="463" value="-8.44001" /><Key frame="469" value="-8.08845" /><Key frame="475" value="-8.44001" /><Key frame="481" value="-8.08845" /><Key frame="487" value="-8.44001" /><Key frame="493" value="-8.08845" /><Key frame="499" value="-8.44001" /><Key frame="505" value="-8.87946" /><Key frame="511" value="-8.4352" /><Key frame="517" value="-8.08364" /><Key frame="523" value="-8.4352" /><Key frame="529" value="-8.08364" /><Key frame="535" value="-8.4352" /><Key frame="541" value="-8.08364" /><Key frame="547" value="-8.4352" /><Key frame="553" value="-8.08364" /><Key frame="559" value="-8.4352" /><Key frame="565" value="-8.08364" /><Key frame="571" value="-8.4352" /><Key frame="577" value="-8.08364" /><Key frame="583" value="-8.4352" /><Key frame="592" value="-26.8094" /><Key frame="601" value="-45.9698" /><Key frame="607" value="-45.4424" /><Key frame="613" value="-45.9698" /><Key frame="619" value="-45.4424" /><Key frame="625" value="-45.9698" /><Key frame="631" value="-45.4424" /><Key frame="637" value="-45.9698" /><Key frame="643" value="-45.4424" /><Key frame="649" value="-45.9698" /><Key frame="655" value="-45.4424" /><Key frame="661" value="-45.9698" /><Key frame="667" value="-45.4424" /><Key frame="673" value="-45.9698" /><Key frame="679" value="-45.4424" /><Key frame="685" value="-45.1788" /><Key frame="691" value="-12.6588" /><Key frame="697" value="-45.1788" /><Key frame="703" value="-34.0117" /><Key frame="709" value="-45.1788" /><Key frame="715" value="-12.6588" /><Key frame="721" value="-45.1788" /><Key frame="727" value="-34.0117" /><Key frame="733" value="-45.1788" /><Key frame="739" value="-12.6588" /><Key frame="745" value="-45.1788" /><Key frame="751" value="-44.6514" /><Key frame="757" value="-45.1788" /><Key frame="763" value="-16.7018" /><Key frame="770" value="-12.9225" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="41" value="0.00440001" /><Key frame="47" value="0.00759995" /><Key frame="53" value="0.00440001" /><Key frame="59" value="0.00759995" /><Key frame="65" value="0.00440001" /><Key frame="71" value="0.00759995" /><Key frame="77" value="0.00440001" /><Key frame="83" value="0.00759995" /><Key frame="89" value="0.00440001" /><Key frame="95" value="0.00759995" /><Key frame="101" value="0.00440001" /><Key frame="107" value="0.00759995" /><Key frame="113" value="0.00440001" /><Key frame="119" value="0.00839996" /><Key frame="125" value="0.00479996" /><Key frame="131" value="0.00999999" /><Key frame="137" value="0.00479996" /><Key frame="143" value="0.00999999" /><Key frame="149" value="0.00479996" /><Key frame="155" value="0.00999999" /><Key frame="161" value="0.00479996" /><Key frame="167" value="0.00999999" /><Key frame="173" value="0.00479996" /><Key frame="179" value="0.00999999" /><Key frame="185" value="0.00479996" /><Key frame="191" value="0.00999999" /><Key frame="197" value="0.00479996" /><Key frame="203" value="0.00999999" /><Key frame="209" value="0.00479996" /><Key frame="215" value="0.00999999" /><Key frame="221" value="0.00479996" /><Key frame="233" value="0.00520003" /><Key frame="239" value="0.00800002" /><Key frame="245" value="0.00520003" /><Key frame="251" value="0.00800002" /><Key frame="257" value="0.00520003" /><Key frame="263" value="0.00800002" /><Key frame="269" value="0.00520003" /><Key frame="275" value="0.00800002" /><Key frame="281" value="0.00520003" /><Key frame="287" value="0.00800002" /><Key frame="293" value="0.00520003" /><Key frame="299" value="0.00800002" /><Key frame="305" value="0.00520003" /><Key frame="311" value="0.00800002" /><Key frame="317" value="0.00520003" /><Key frame="323" value="0.00800002" /><Key frame="329" value="0.00520003" /><Key frame="335" value="0.00800002" /><Key frame="341" value="0.00520003" /><Key frame="347" value="0.00800002" /><Key frame="353" value="0.00520003" /><Key frame="359" value="0.00800002" /><Key frame="367" value="0.0664001" /><Key frame="376" value="0.2516" /><Key frame="398" value="0.2984" /><Key frame="402" value="0.2976" /><Key frame="409" value="0.1316" /><Key frame="415" value="0.00160003" /><Key frame="421" value="0.0112" /><Key frame="427" value="0.00160003" /><Key frame="433" value="0.0112" /><Key frame="439" value="0.00160003" /><Key frame="445" value="0.0112" /><Key frame="451" value="0.00160003" /><Key frame="457" value="0.0112" /><Key frame="463" value="0.00160003" /><Key frame="469" value="0.0112" /><Key frame="475" value="0.00160003" /><Key frame="481" value="0.0112" /><Key frame="487" value="0.00160003" /><Key frame="493" value="0.0112" /><Key frame="499" value="0.00160003" /><Key frame="505" value="0.00839996" /><Key frame="511" value="0.0036" /><Key frame="517" value="0.0116" /><Key frame="523" value="0.0036" /><Key frame="529" value="0.0116" /><Key frame="535" value="0.0036" /><Key frame="541" value="0.0116" /><Key frame="547" value="0.0036" /><Key frame="553" value="0.0116" /><Key frame="559" value="0.0036" /><Key frame="565" value="0.0116" /><Key frame="571" value="0.0036" /><Key frame="577" value="0.0116" /><Key frame="583" value="0.0036" /><Key frame="592" value="0.00759995" /><Key frame="601" value="0.00520003" /><Key frame="607" value="0.00800002" /><Key frame="613" value="0.00520003" /><Key frame="619" value="0.00800002" /><Key frame="625" value="0.00520003" /><Key frame="631" value="0.00800002" /><Key frame="637" value="0.00520003" /><Key frame="643" value="0.00800002" /><Key frame="649" value="0.00520003" /><Key frame="655" value="0.00800002" /><Key frame="661" value="0.00520003" /><Key frame="667" value="0.00800002" /><Key frame="673" value="0.00520003" /><Key frame="679" value="0.00800002" /><Key frame="685" value="0.0116" /><Key frame="691" value="0.0112" /><Key frame="697" value="0.0116" /><Key frame="703" value="0.0156" /><Key frame="709" value="0.0116" /><Key frame="715" value="0.0112" /><Key frame="721" value="0.0116" /><Key frame="727" value="0.0156" /><Key frame="733" value="0.0116" /><Key frame="739" value="0.0112" /><Key frame="745" value="0.0116" /><Key frame="751" value="0.0276" /><Key frame="757" value="0.0116" /><Key frame="763" value="0.0276" /><Key frame="770" value="0.026" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0"><Key frame="41" value="4.1" /><Key frame="47" value="-7.55628" /><Key frame="53" value="4.1" /><Key frame="59" value="-7.55628" /><Key frame="65" value="4.1" /><Key frame="71" value="-7.55628" /><Key frame="77" value="4.1" /><Key frame="83" value="-7.55628" /><Key frame="89" value="4.1" /><Key frame="95" value="-7.55628" /><Key frame="101" value="4.1" /><Key frame="107" value="-7.55628" /><Key frame="113" value="4.1" /><Key frame="125" value="4.1" /><Key frame="131" value="-7.03374" /><Key frame="137" value="4.1" /><Key frame="143" value="-7.03374" /><Key frame="149" value="4.1" /><Key frame="155" value="-7.03374" /><Key frame="161" value="4.1" /><Key frame="167" value="-7.03374" /><Key frame="173" value="4.1" /><Key frame="179" value="-7.03374" /><Key frame="185" value="4.1" /><Key frame="191" value="-7.03374" /><Key frame="197" value="4.1" /><Key frame="203" value="-7.03374" /><Key frame="209" value="4.1" /><Key frame="215" value="-7.03374" /><Key frame="221" value="4.1" /><Key frame="233" value="-7.03374" /><Key frame="239" value="4.1" /><Key frame="245" value="-7.03374" /><Key frame="251" value="4.1" /><Key frame="257" value="-7.03374" /><Key frame="263" value="4.1" /><Key frame="269" value="-7.03374" /><Key frame="275" value="4.1" /><Key frame="281" value="-7.03374" /><Key frame="287" value="4.1" /><Key frame="293" value="-7.03374" /><Key frame="299" value="4.1" /><Key frame="305" value="-7.03374" /><Key frame="311" value="4.1" /><Key frame="317" value="-7.03374" /><Key frame="323" value="4.1" /><Key frame="329" value="-7.03374" /><Key frame="335" value="4.1" /><Key frame="341" value="-7.03374" /><Key frame="347" value="4.1" /><Key frame="353" value="-7.03374" /><Key frame="359" value="4.1" /><Key frame="367" value="6.77007" /><Key frame="376" value="7.91266" /><Key frame="398" value="8.00056" /><Key frame="402" value="8.00056" /><Key frame="415" value="-2.54646" /><Key frame="421" value="-4.74374" /><Key frame="427" value="-2.54646" /><Key frame="433" value="-4.74374" /><Key frame="439" value="-2.54646" /><Key frame="445" value="-4.74374" /><Key frame="451" value="-2.54646" /><Key frame="457" value="-4.74374" /><Key frame="463" value="-2.54646" /><Key frame="469" value="-4.74374" /><Key frame="475" value="-2.54646" /><Key frame="481" value="-4.74374" /><Key frame="487" value="-2.54646" /><Key frame="493" value="-4.74374" /><Key frame="499" value="-2.54646" /><Key frame="505" value="-13.9" /><Key frame="511" value="14.2361" /><Key frame="517" value="14.5876" /><Key frame="523" value="14.2361" /><Key frame="529" value="14.5876" /><Key frame="535" value="14.2361" /><Key frame="541" value="14.5876" /><Key frame="547" value="14.2361" /><Key frame="553" value="14.5876" /><Key frame="559" value="14.2361" /><Key frame="565" value="14.5876" /><Key frame="571" value="14.2361" /><Key frame="577" value="14.5876" /><Key frame="583" value="14.2361" /><Key frame="601" value="-7.03374" /><Key frame="607" value="4.1" /><Key frame="613" value="-7.03374" /><Key frame="619" value="4.1" /><Key frame="625" value="-7.03374" /><Key frame="631" value="4.1" /><Key frame="637" value="-7.03374" /><Key frame="643" value="4.1" /><Key frame="649" value="-7.03374" /><Key frame="655" value="4.1" /><Key frame="661" value="-7.03374" /><Key frame="667" value="4.1" /><Key frame="673" value="-7.03374" /><Key frame="679" value="4.1" /><Key frame="685" value="-7.03374" /><Key frame="691" value="4.1" /><Key frame="697" value="-7.03374" /><Key frame="703" value="4.1" /><Key frame="709" value="-7.03374" /><Key frame="715" value="4.1" /><Key frame="721" value="-7.03374" /><Key frame="727" value="4.1" /><Key frame="733" value="-7.03374" /><Key frame="739" value="4.1" /><Key frame="745" value="-7.03374" /><Key frame="751" value="4.1" /><Key frame="757" value="-7.03374" /><Key frame="763" value="2.55127" /><Key frame="770" value="4.1" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0"><Key frame="41" value="-9.92936" /><Key frame="47" value="-9.92936" /><Key frame="53" value="-9.92936" /><Key frame="59" value="-9.92936" /><Key frame="65" value="-9.92936" /><Key frame="71" value="-9.92936" /><Key frame="77" value="-9.92936" /><Key frame="83" value="-9.92936" /><Key frame="89" value="-9.92936" /><Key frame="95" value="-9.92936" /><Key frame="101" value="-9.92936" /><Key frame="107" value="-9.92936" /><Key frame="113" value="-9.92936" /><Key frame="125" value="-9.92936" /><Key frame="131" value="-9.92936" /><Key frame="137" value="-9.92936" /><Key frame="143" value="-9.92936" /><Key frame="149" value="-9.92936" /><Key frame="155" value="-9.92936" /><Key frame="161" value="-9.92936" /><Key frame="167" value="-9.92936" /><Key frame="173" value="-9.92936" /><Key frame="179" value="-9.92936" /><Key frame="185" value="-9.92936" /><Key frame="191" value="-9.92936" /><Key frame="197" value="-9.92936" /><Key frame="203" value="-9.92936" /><Key frame="209" value="-9.92936" /><Key frame="215" value="-9.92936" /><Key frame="221" value="-9.92936" /><Key frame="233" value="-9.92936" /><Key frame="239" value="-9.92936" /><Key frame="245" value="-9.92936" /><Key frame="251" value="-9.92936" /><Key frame="257" value="-9.92936" /><Key frame="263" value="-9.92936" /><Key frame="269" value="-9.92936" /><Key frame="275" value="-9.92936" /><Key frame="281" value="-9.92936" /><Key frame="287" value="-9.92936" /><Key frame="293" value="-9.92936" /><Key frame="299" value="-9.92936" /><Key frame="305" value="-9.92936" /><Key frame="311" value="-9.92936" /><Key frame="317" value="-9.92936" /><Key frame="323" value="-9.92936" /><Key frame="329" value="-9.92936" /><Key frame="335" value="-9.92936" /><Key frame="341" value="-9.92936" /><Key frame="347" value="-9.92936" /><Key frame="353" value="-9.92936" /><Key frame="359" value="-9.92936" /><Key frame="367" value="-10.193" /><Key frame="376" value="-9.84147" /><Key frame="398" value="-9.84147" /><Key frame="402" value="-9.84147" /><Key frame="415" value="-13.0935" /><Key frame="421" value="-13.0935" /><Key frame="427" value="-13.0935" /><Key frame="433" value="-13.0935" /><Key frame="439" value="-13.0935" /><Key frame="445" value="-13.0935" /><Key frame="451" value="-13.0935" /><Key frame="457" value="-13.0935" /><Key frame="463" value="-13.0935" /><Key frame="469" value="-13.0935" /><Key frame="475" value="-13.0935" /><Key frame="481" value="-13.0935" /><Key frame="487" value="-13.0935" /><Key frame="493" value="-13.0935" /><Key frame="499" value="-13.0935" /><Key frame="511" value="-13.0935" /><Key frame="517" value="-13.0935" /><Key frame="523" value="-13.0935" /><Key frame="529" value="-13.0935" /><Key frame="535" value="-13.0935" /><Key frame="541" value="-13.0935" /><Key frame="547" value="-13.0935" /><Key frame="553" value="-13.0935" /><Key frame="559" value="-13.0935" /><Key frame="565" value="-13.0935" /><Key frame="571" value="-13.0935" /><Key frame="577" value="-13.0935" /><Key frame="583" value="-13.0935" /><Key frame="601" value="-9.92936" /><Key frame="607" value="-9.92936" /><Key frame="613" value="-9.92936" /><Key frame="619" value="-9.92936" /><Key frame="625" value="-9.92936" /><Key frame="631" value="-9.92936" /><Key frame="637" value="-9.92936" /><Key frame="643" value="-9.92936" /><Key frame="649" value="-9.92936" /><Key frame="655" value="-9.92936" /><Key frame="661" value="-9.92936" /><Key frame="667" value="-9.92936" /><Key frame="673" value="-9.92936" /><Key frame="679" value="-9.92936" /><Key frame="685" value="-9.92936" /><Key frame="691" value="-9.92936" /><Key frame="697" value="-9.92936" /><Key frame="703" value="-9.92936" /><Key frame="709" value="-9.92936" /><Key frame="715" value="-9.92936" /><Key frame="721" value="-9.92936" /><Key frame="727" value="-9.92936" /><Key frame="733" value="-9.92936" /><Key frame="739" value="-9.92936" /><Key frame="745" value="-9.92936" /><Key frame="751" value="-9.92936" /><Key frame="757" value="-9.92936" /><Key frame="763" value="-9.92936" /><Key frame="770" value="-9.92936" /></ActuatorCurve><ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0"><Key frame="41" value="-5.18802" /><Key frame="47" value="7.73207" /><Key frame="53" value="-5.18802" /><Key frame="59" value="7.73207" /><Key frame="65" value="-5.18802" /><Key frame="71" value="7.73207" /><Key frame="77" value="-5.18802" /><Key frame="83" value="7.73207" /><Key frame="89" value="-5.18802" /><Key frame="95" value="7.73207" /><Key frame="101" value="-5.18802" /><Key frame="107" value="7.73207" /><Key frame="113" value="-5.18802" /><Key frame="125" value="-5.18802" /><Key frame="131" value="8.17634" /><Key frame="137" value="-5.18802" /><Key frame="143" value="8.17634" /><Key frame="149" value="-5.18802" /><Key frame="155" value="8.17634" /><Key frame="161" value="-5.18802" /><Key frame="167" value="8.17634" /><Key frame="173" value="-5.18802" /><Key frame="179" value="8.17634" /><Key frame="185" value="-5.18802" /><Key frame="191" value="8.17634" /><Key frame="197" value="-5.18802" /><Key frame="203" value="8.17634" /><Key frame="209" value="-5.18802" /><Key frame="215" value="8.17634" /><Key frame="221" value="-5.18802" /><Key frame="233" value="8.17634" /><Key frame="239" value="-5.18802" /><Key frame="245" value="8.17634" /><Key frame="251" value="-5.18802" /><Key frame="257" value="8.17634" /><Key frame="263" value="-5.18802" /><Key frame="269" value="8.17634" /><Key frame="275" value="-5.18802" /><Key frame="281" value="8.17634" /><Key frame="287" value="-5.18802" /><Key frame="293" value="8.17634" /><Key frame="299" value="-5.18802" /><Key frame="305" value="8.17634" /><Key frame="311" value="-5.18802" /><Key frame="317" value="8.17634" /><Key frame="323" value="-5.18802" /><Key frame="329" value="8.17634" /><Key frame="335" value="-5.18802" /><Key frame="341" value="8.17634" /><Key frame="347" value="-5.18802" /><Key frame="353" value="8.17634" /><Key frame="359" value="-5.18802" /><Key frame="367" value="-5.18802" /><Key frame="376" value="-5.27591" /><Key frame="398" value="-5.29" /><Key frame="402" value="-5.29" /><Key frame="415" value="35.0664" /><Key frame="421" value="41.2188" /><Key frame="427" value="35.0664" /><Key frame="433" value="41.2188" /><Key frame="439" value="35.0664" /><Key frame="445" value="41.2188" /><Key frame="451" value="35.0664" /><Key frame="457" value="41.2188" /><Key frame="463" value="35.0664" /><Key frame="469" value="41.2188" /><Key frame="475" value="35.0664" /><Key frame="481" value="41.2188" /><Key frame="487" value="35.0664" /><Key frame="493" value="41.2188" /><Key frame="499" value="35.0664" /><Key frame="505" value="20" /><Key frame="511" value="-5.09532" /><Key frame="517" value="-4.83163" /><Key frame="523" value="-5.09532" /><Key frame="529" value="-4.83163" /><Key frame="535" value="-5.09532" /><Key frame="541" value="-4.83163" /><Key frame="547" value="-5.09532" /><Key frame="553" value="-4.83163" /><Key frame="559" value="-5.09532" /><Key frame="565" value="-4.83163" /><Key frame="571" value="-5.09532" /><Key frame="577" value="-4.83163" /><Key frame="583" value="-5.09532" /><Key frame="601" value="8.17634" /><Key frame="607" value="-5.18802" /><Key frame="613" value="8.17634" /><Key frame="619" value="-5.18802" /><Key frame="625" value="8.17634" /><Key frame="631" value="-5.18802" /><Key frame="637" value="8.17634" /><Key frame="643" value="-5.18802" /><Key frame="649" value="8.17634" /><Key frame="655" value="-5.18802" /><Key frame="661" value="8.17634" /><Key frame="667" value="-5.18802" /><Key frame="673" value="8.17634" /><Key frame="679" value="-5.18802" /><Key frame="685" value="8.17634" /><Key frame="691" value="-5.18802" /><Key frame="697" value="8.17634" /><Key frame="703" value="-5.18802" /><Key frame="709" value="8.17634" /><Key frame="715" value="-5.18802" /><Key frame="721" value="8.17634" /><Key frame="727" value="-5.18802" /><Key frame="733" value="8.17634" /><Key frame="739" value="-5.18802" /><Key frame="745" value="8.17634" /><Key frame="751" value="-5.18802" /><Key frame="757" value="8.17634" /><Key frame="763" value="-3.1665" /><Key frame="770" value="-5.18802" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="41" value="13.0056" /><Key frame="47" value="22.65" /><Key frame="53" value="13.0056" /><Key frame="59" value="22.65" /><Key frame="65" value="13.0056" /><Key frame="71" value="22.65" /><Key frame="77" value="13.0056" /><Key frame="83" value="22.65" /><Key frame="89" value="13.0056" /><Key frame="95" value="22.65" /><Key frame="101" value="13.0056" /><Key frame="107" value="22.65" /><Key frame="113" value="13.0056" /><Key frame="119" value="-52.9132" /><Key frame="125" value="-82.7037" /><Key frame="131" value="-73.3599" /><Key frame="137" value="-82.7037" /><Key frame="143" value="-73.3599" /><Key frame="149" value="-82.7037" /><Key frame="155" value="-73.3599" /><Key frame="161" value="-82.7037" /><Key frame="167" value="-73.3599" /><Key frame="173" value="-82.7037" /><Key frame="179" value="-73.3599" /><Key frame="185" value="-82.7037" /><Key frame="191" value="-73.3599" /><Key frame="197" value="-82.7037" /><Key frame="203" value="-73.3599" /><Key frame="209" value="-82.7037" /><Key frame="215" value="-73.3599" /><Key frame="221" value="-82.7037" /><Key frame="233" value="-15.7" /><Key frame="239" value="-7.5764" /><Key frame="245" value="-15.7" /><Key frame="251" value="-7.5764" /><Key frame="257" value="-15.7" /><Key frame="263" value="-7.5764" /><Key frame="269" value="-15.7" /><Key frame="275" value="-7.5764" /><Key frame="281" value="-15.7" /><Key frame="287" value="-7.5764" /><Key frame="293" value="-15.7" /><Key frame="299" value="-7.5764" /><Key frame="305" value="-15.7" /><Key frame="311" value="-7.5764" /><Key frame="317" value="-15.7" /><Key frame="323" value="-7.5764" /><Key frame="329" value="-15.7" /><Key frame="335" value="-7.5764" /><Key frame="341" value="-15.7" /><Key frame="347" value="-7.5764" /><Key frame="353" value="-15.7" /><Key frame="359" value="-7.5764" /><Key frame="367" value="24.5194" /><Key frame="376" value="75.5845" /><Key frame="398" value="85.0768" /><Key frame="402" value="85.3405" /><Key frame="409" value="89.3835" /><Key frame="415" value="91.8445" /><Key frame="421" value="92.2839" /><Key frame="427" value="91.8445" /><Key frame="433" value="92.2839" /><Key frame="439" value="91.8445" /><Key frame="445" value="92.2839" /><Key frame="451" value="91.8445" /><Key frame="457" value="92.2839" /><Key frame="463" value="91.8445" /><Key frame="469" value="92.2839" /><Key frame="475" value="91.8445" /><Key frame="481" value="92.2839" /><Key frame="487" value="91.8445" /><Key frame="493" value="92.2839" /><Key frame="499" value="91.8445" /><Key frame="505" value="91.405" /><Key frame="511" value="91.8493" /><Key frame="517" value="92.2008" /><Key frame="523" value="91.8493" /><Key frame="529" value="92.2008" /><Key frame="535" value="91.8493" /><Key frame="541" value="92.2008" /><Key frame="547" value="91.8493" /><Key frame="553" value="92.2008" /><Key frame="559" value="91.8493" /><Key frame="565" value="92.2008" /><Key frame="571" value="91.8493" /><Key frame="577" value="92.2008" /><Key frame="583" value="91.8493" /><Key frame="592" value="39.461" /><Key frame="601" value="-15.7" /><Key frame="607" value="-7.5764" /><Key frame="613" value="-15.7" /><Key frame="619" value="-7.5764" /><Key frame="625" value="-15.7" /><Key frame="631" value="-7.5764" /><Key frame="637" value="-15.7" /><Key frame="643" value="-7.5764" /><Key frame="649" value="-15.7" /><Key frame="655" value="-7.5764" /><Key frame="661" value="-15.7" /><Key frame="667" value="-7.5764" /><Key frame="673" value="-15.7" /><Key frame="679" value="-7.5764" /><Key frame="685" value="3.24959" /><Key frame="691" value="11.7751" /><Key frame="697" value="3.24959" /><Key frame="703" value="-4.04062" /><Key frame="709" value="3.24959" /><Key frame="715" value="11.7751" /><Key frame="721" value="3.24959" /><Key frame="727" value="-4.04062" /><Key frame="733" value="3.24959" /><Key frame="739" value="11.7751" /><Key frame="745" value="3.24959" /><Key frame="751" value="-0.353968" /><Key frame="757" value="3.24959" /><Key frame="763" value="14.2361" /><Key frame="770" value="13.7966" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="41" value="6.94104" /><Key frame="47" value="8.08364" /><Key frame="53" value="6.94104" /><Key frame="59" value="8.08364" /><Key frame="65" value="6.94104" /><Key frame="71" value="8.08364" /><Key frame="77" value="6.94104" /><Key frame="83" value="8.08364" /><Key frame="89" value="6.94104" /><Key frame="95" value="8.08364" /><Key frame="101" value="6.94104" /><Key frame="107" value="8.08364" /><Key frame="113" value="6.94104" /><Key frame="119" value="9.31412" /><Key frame="125" value="18.987" /><Key frame="131" value="16.2624" /><Key frame="137" value="18.987" /><Key frame="143" value="16.2624" /><Key frame="149" value="18.987" /><Key frame="155" value="16.2624" /><Key frame="161" value="18.987" /><Key frame="167" value="16.2624" /><Key frame="173" value="18.987" /><Key frame="179" value="16.2624" /><Key frame="185" value="18.987" /><Key frame="191" value="16.2624" /><Key frame="197" value="18.987" /><Key frame="203" value="16.2624" /><Key frame="209" value="18.987" /><Key frame="215" value="16.2624" /><Key frame="221" value="18.987" /><Key frame="233" value="-16.3503" /><Key frame="239" value="-16.3503" /><Key frame="245" value="-16.3503" /><Key frame="251" value="-16.3503" /><Key frame="257" value="-16.3503" /><Key frame="263" value="-16.3503" /><Key frame="269" value="-16.3503" /><Key frame="275" value="-16.3503" /><Key frame="281" value="-16.3503" /><Key frame="287" value="-16.3503" /><Key frame="293" value="-16.3503" /><Key frame="299" value="-16.3503" /><Key frame="305" value="-16.3503" /><Key frame="311" value="-16.3503" /><Key frame="317" value="-16.3503" /><Key frame="323" value="-16.3503" /><Key frame="329" value="-16.3503" /><Key frame="335" value="-16.3503" /><Key frame="341" value="-16.3503" /><Key frame="347" value="-16.3503" /><Key frame="353" value="-16.3503" /><Key frame="359" value="-16.3503" /><Key frame="367" value="-12.8346" /><Key frame="376" value="2.98591" /><Key frame="398" value="6.85315" /><Key frame="402" value="5.44688" /><Key frame="409" value="43.1524" /><Key frame="415" value="47.9865" /><Key frame="421" value="43.9435" /><Key frame="427" value="47.9865" /><Key frame="433" value="43.9435" /><Key frame="439" value="47.9865" /><Key frame="445" value="43.9435" /><Key frame="451" value="47.9865" /><Key frame="457" value="43.9435" /><Key frame="463" value="47.9865" /><Key frame="469" value="43.9435" /><Key frame="475" value="47.9865" /><Key frame="481" value="43.9435" /><Key frame="487" value="47.9865" /><Key frame="493" value="43.9435" /><Key frame="499" value="47.9865" /><Key frame="505" value="56.6878" /><Key frame="511" value="47.376" /><Key frame="517" value="44.0362" /><Key frame="523" value="47.376" /><Key frame="529" value="44.0362" /><Key frame="535" value="47.376" /><Key frame="541" value="44.0362" /><Key frame="547" value="47.376" /><Key frame="553" value="44.0362" /><Key frame="559" value="47.376" /><Key frame="565" value="44.0362" /><Key frame="571" value="47.376" /><Key frame="577" value="44.0362" /><Key frame="583" value="47.376" /><Key frame="592" value="14.8513" /><Key frame="601" value="-16.3503" /><Key frame="607" value="-16.3503" /><Key frame="613" value="-16.3503" /><Key frame="619" value="-16.3503" /><Key frame="625" value="-16.3503" /><Key frame="631" value="-16.3503" /><Key frame="637" value="-16.3503" /><Key frame="643" value="-16.3503" /><Key frame="649" value="-16.3503" /><Key frame="655" value="-16.3503" /><Key frame="661" value="-16.3503" /><Key frame="667" value="-16.3503" /><Key frame="673" value="-16.3503" /><Key frame="679" value="-16.3503" /><Key frame="685" value="0.173378" /><Key frame="691" value="-17.3171" /><Key frame="697" value="0.173378" /><Key frame="703" value="-18" /><Key frame="709" value="0.173378" /><Key frame="715" value="-17.3171" /><Key frame="721" value="0.173378" /><Key frame="727" value="-18" /><Key frame="733" value="0.173378" /><Key frame="739" value="-17.3171" /><Key frame="745" value="0.173378" /><Key frame="751" value="-17.4929" /><Key frame="757" value="0.173378" /><Key frame="763" value="-13.5377" /><Key frame="770" value="-16.7018" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="41" value="6.06212" /><Key frame="47" value="6.06212" /><Key frame="53" value="6.06212" /><Key frame="59" value="6.06212" /><Key frame="65" value="6.06212" /><Key frame="71" value="6.06212" /><Key frame="77" value="6.06212" /><Key frame="83" value="6.06212" /><Key frame="89" value="6.06212" /><Key frame="95" value="6.06212" /><Key frame="101" value="6.06212" /><Key frame="107" value="6.06212" /><Key frame="113" value="6.06212" /><Key frame="119" value="2.72224" /><Key frame="125" value="-6.58948" /><Key frame="131" value="-27.6835" /><Key frame="137" value="-6.58948" /><Key frame="143" value="-27.6835" /><Key frame="149" value="-6.58948" /><Key frame="155" value="-27.6835" /><Key frame="161" value="-6.58948" /><Key frame="167" value="-27.6835" /><Key frame="173" value="-6.58948" /><Key frame="179" value="-27.6835" /><Key frame="185" value="-6.58948" /><Key frame="191" value="-27.6835" /><Key frame="197" value="-6.58948" /><Key frame="203" value="-27.6835" /><Key frame="209" value="-6.58948" /><Key frame="215" value="-27.6835" /><Key frame="221" value="-6.58948" /><Key frame="233" value="48.5138" /><Key frame="239" value="48.6896" /><Key frame="245" value="48.5138" /><Key frame="251" value="48.6896" /><Key frame="257" value="48.5138" /><Key frame="263" value="48.6896" /><Key frame="269" value="48.5138" /><Key frame="275" value="48.6896" /><Key frame="281" value="48.5138" /><Key frame="287" value="48.6896" /><Key frame="293" value="48.5138" /><Key frame="299" value="48.6896" /><Key frame="305" value="48.5138" /><Key frame="311" value="48.6896" /><Key frame="317" value="48.5138" /><Key frame="323" value="48.6896" /><Key frame="329" value="48.5138" /><Key frame="335" value="48.6896" /><Key frame="341" value="48.5138" /><Key frame="347" value="48.6896" /><Key frame="353" value="48.5138" /><Key frame="359" value="48.6896" /><Key frame="367" value="39.9883" /><Key frame="376" value="9.84147" /><Key frame="398" value="4.65585" /><Key frame="402" value="5.35899" /><Key frame="409" value="5.2711" /><Key frame="415" value="5.00743" /><Key frame="421" value="4.91954" /><Key frame="427" value="5.00743" /><Key frame="433" value="4.91954" /><Key frame="439" value="5.00743" /><Key frame="445" value="4.91954" /><Key frame="451" value="5.00743" /><Key frame="457" value="4.91954" /><Key frame="463" value="5.00743" /><Key frame="469" value="4.91954" /><Key frame="475" value="5.00743" /><Key frame="481" value="4.91954" /><Key frame="487" value="5.00743" /><Key frame="493" value="4.91954" /><Key frame="499" value="5.00743" /><Key frame="505" value="0.173378" /><Key frame="511" value="-4.39218" /><Key frame="517" value="-4.39218" /><Key frame="523" value="-4.39218" /><Key frame="529" value="-4.39218" /><Key frame="535" value="-4.39218" /><Key frame="541" value="-4.39218" /><Key frame="547" value="-4.39218" /><Key frame="553" value="-4.39218" /><Key frame="559" value="-4.39218" /><Key frame="565" value="-4.39218" /><Key frame="571" value="-4.39218" /><Key frame="577" value="-4.39218" /><Key frame="583" value="-4.39218" /><Key frame="592" value="20.74" /><Key frame="601" value="48.5138" /><Key frame="607" value="48.6896" /><Key frame="613" value="48.5138" /><Key frame="619" value="48.6896" /><Key frame="625" value="48.5138" /><Key frame="631" value="48.6896" /><Key frame="637" value="48.5138" /><Key frame="643" value="48.6896" /><Key frame="649" value="48.5138" /><Key frame="655" value="48.6896" /><Key frame="661" value="48.5138" /><Key frame="667" value="48.6896" /><Key frame="673" value="48.5138" /><Key frame="679" value="48.6896" /><Key frame="685" value="48.2502" /><Key frame="691" value="48.338" /><Key frame="697" value="48.2502" /><Key frame="703" value="30.9403" /><Key frame="709" value="48.2502" /><Key frame="715" value="48.338" /><Key frame="721" value="48.2502" /><Key frame="727" value="30.9403" /><Key frame="733" value="48.2502" /><Key frame="739" value="48.338" /><Key frame="745" value="48.2502" /><Key frame="751" value="32.6054" /><Key frame="757" value="48.2502" /><Key frame="763" value="47.2834" /><Key frame="770" value="46.6681" /></ActuatorCurve><ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0"><Key frame="41" value="5.80326" /><Key frame="47" value="2.55127" /><Key frame="53" value="5.80326" /><Key frame="59" value="2.55127" /><Key frame="65" value="5.80326" /><Key frame="71" value="2.55127" /><Key frame="77" value="5.80326" /><Key frame="83" value="2.55127" /><Key frame="89" value="5.80326" /><Key frame="95" value="2.55127" /><Key frame="101" value="5.80326" /><Key frame="107" value="2.55127" /><Key frame="113" value="5.80326" /><Key frame="125" value="5.80326" /><Key frame="131" value="4.48007" /><Key frame="137" value="5.80326" /><Key frame="143" value="4.48007" /><Key frame="149" value="5.80326" /><Key frame="155" value="4.48007" /><Key frame="161" value="5.80326" /><Key frame="167" value="4.48007" /><Key frame="173" value="5.80326" /><Key frame="179" value="4.48007" /><Key frame="185" value="5.80326" /><Key frame="191" value="4.48007" /><Key frame="197" value="5.80326" /><Key frame="203" value="4.48007" /><Key frame="209" value="5.80326" /><Key frame="215" value="4.48007" /><Key frame="221" value="5.80326" /><Key frame="233" value="4.48007" /><Key frame="239" value="5.80326" /><Key frame="245" value="4.48007" /><Key frame="251" value="5.80326" /><Key frame="257" value="4.48007" /><Key frame="263" value="5.80326" /><Key frame="269" value="4.48007" /><Key frame="275" value="5.80326" /><Key frame="281" value="4.48007" /><Key frame="287" value="5.80326" /><Key frame="293" value="4.48007" /><Key frame="299" value="5.80326" /><Key frame="305" value="4.48007" /><Key frame="311" value="5.80326" /><Key frame="317" value="4.48007" /><Key frame="323" value="5.80326" /><Key frame="329" value="4.48007" /><Key frame="335" value="5.80326" /><Key frame="341" value="4.48007" /><Key frame="347" value="5.80326" /><Key frame="353" value="4.48007" /><Key frame="359" value="5.80326" /><Key frame="367" value="5.80326" /><Key frame="376" value="5.97904" /><Key frame="398" value="5.97904" /><Key frame="402" value="6.06693" /><Key frame="415" value="6.24271" /><Key frame="421" value="6.41851" /><Key frame="427" value="6.24271" /><Key frame="433" value="6.41851" /><Key frame="439" value="6.24271" /><Key frame="445" value="6.41851" /><Key frame="451" value="6.24271" /><Key frame="457" value="6.41851" /><Key frame="463" value="6.24271" /><Key frame="469" value="6.41851" /><Key frame="475" value="6.24271" /><Key frame="481" value="6.41851" /><Key frame="487" value="6.24271" /><Key frame="493" value="6.41851" /><Key frame="499" value="6.24271" /><Key frame="511" value="-18.6354" /><Key frame="517" value="-22.0632" /><Key frame="523" value="-18.6354" /><Key frame="529" value="-22.0632" /><Key frame="535" value="-18.6354" /><Key frame="541" value="-22.0632" /><Key frame="547" value="-18.6354" /><Key frame="553" value="-22.0632" /><Key frame="559" value="-18.6354" /><Key frame="565" value="-22.0632" /><Key frame="571" value="-18.6354" /><Key frame="577" value="-22.0632" /><Key frame="583" value="-18.6354" /><Key frame="601" value="4.48007" /><Key frame="607" value="5.80326" /><Key frame="613" value="4.48007" /><Key frame="619" value="5.80326" /><Key frame="625" value="4.48007" /><Key frame="631" value="5.80326" /><Key frame="637" value="4.48007" /><Key frame="643" value="5.80326" /><Key frame="649" value="4.48007" /><Key frame="655" value="5.80326" /><Key frame="661" value="4.48007" /><Key frame="667" value="5.80326" /><Key frame="673" value="4.48007" /><Key frame="679" value="5.80326" /><Key frame="685" value="4.48007" /><Key frame="691" value="5.80326" /><Key frame="697" value="4.48007" /><Key frame="703" value="5.80326" /><Key frame="709" value="4.48007" /><Key frame="715" value="5.80326" /><Key frame="721" value="4.48007" /><Key frame="727" value="5.80326" /><Key frame="733" value="4.48007" /><Key frame="739" value="5.80326" /><Key frame="745" value="4.48007" /><Key frame="751" value="5.80326" /><Key frame="757" value="4.48007" /><Key frame="763" value="5.71537" /><Key frame="770" value="5.80326" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="41" value="20.0417" /><Key frame="47" value="31.5555" /><Key frame="53" value="20.0417" /><Key frame="59" value="31.5555" /><Key frame="65" value="20.0417" /><Key frame="71" value="31.5555" /><Key frame="77" value="20.0417" /><Key frame="83" value="31.5555" /><Key frame="89" value="20.0417" /><Key frame="95" value="31.5555" /><Key frame="101" value="20.0417" /><Key frame="107" value="31.5555" /><Key frame="113" value="20.0417" /><Key frame="119" value="61.8" /><Key frame="125" value="87.5378" /><Key frame="131" value="85.3405" /><Key frame="137" value="87.5378" /><Key frame="143" value="85.3405" /><Key frame="149" value="87.5378" /><Key frame="155" value="85.3405" /><Key frame="161" value="87.5378" /><Key frame="167" value="85.3405" /><Key frame="173" value="87.5378" /><Key frame="179" value="85.3405" /><Key frame="185" value="87.5378" /><Key frame="191" value="85.3405" /><Key frame="197" value="87.5378" /><Key frame="203" value="85.3405" /><Key frame="209" value="87.5378" /><Key frame="215" value="85.3405" /><Key frame="221" value="87.5378" /><Key frame="233" value="25.4031" /><Key frame="239" value="25.3152" /><Key frame="245" value="25.4031" /><Key frame="251" value="25.3152" /><Key frame="257" value="25.4031" /><Key frame="263" value="25.3152" /><Key frame="269" value="25.4031" /><Key frame="275" value="25.3152" /><Key frame="281" value="25.4031" /><Key frame="287" value="25.3152" /><Key frame="293" value="25.4031" /><Key frame="299" value="25.3152" /><Key frame="305" value="25.4031" /><Key frame="311" value="25.3152" /><Key frame="317" value="25.4031" /><Key frame="323" value="25.3152" /><Key frame="329" value="25.4031" /><Key frame="335" value="25.3152" /><Key frame="341" value="25.4031" /><Key frame="347" value="25.3152" /><Key frame="353" value="25.4031" /><Key frame="359" value="25.3152" /><Key frame="371" value="68.1" /><Key frame="386" value="34.1404" /><Key frame="398" value="25.491" /><Key frame="403" value="24.4363" /><Key frame="409" value="49.1339" /><Key frame="415" value="87.3668" /><Key frame="421" value="73.392" /><Key frame="427" value="87.3668" /><Key frame="433" value="73.392" /><Key frame="439" value="87.3668" /><Key frame="445" value="73.392" /><Key frame="451" value="87.3668" /><Key frame="457" value="73.392" /><Key frame="463" value="87.3668" /><Key frame="469" value="73.392" /><Key frame="475" value="87.3668" /><Key frame="481" value="73.392" /><Key frame="487" value="87.3668" /><Key frame="493" value="73.392" /><Key frame="499" value="87.3668" /><Key frame="505" value="67.7669" /><Key frame="511" value="87.5378" /><Key frame="517" value="73.6509" /><Key frame="523" value="87.5378" /><Key frame="529" value="73.6509" /><Key frame="535" value="87.5378" /><Key frame="541" value="73.6509" /><Key frame="547" value="87.5378" /><Key frame="553" value="73.6509" /><Key frame="559" value="87.5378" /><Key frame="565" value="73.6509" /><Key frame="571" value="87.5378" /><Key frame="577" value="73.6509" /><Key frame="583" value="87.5378" /><Key frame="592" value="87.3" /><Key frame="601" value="25.4031" /><Key frame="607" value="25.3152" /><Key frame="613" value="25.4031" /><Key frame="619" value="25.3152" /><Key frame="625" value="25.4031" /><Key frame="631" value="25.3152" /><Key frame="637" value="25.4031" /><Key frame="643" value="25.3152" /><Key frame="649" value="25.4031" /><Key frame="655" value="25.3152" /><Key frame="661" value="25.4031" /><Key frame="667" value="25.3152" /><Key frame="673" value="25.4031" /><Key frame="679" value="25.3152" /><Key frame="685" value="3.95753" /><Key frame="691" value="45.7061" /><Key frame="697" value="3.95753" /><Key frame="703" value="30.1445" /><Key frame="709" value="3.95753" /><Key frame="715" value="45.7061" /><Key frame="721" value="3.95753" /><Key frame="727" value="30.1445" /><Key frame="733" value="3.95753" /><Key frame="739" value="45.7061" /><Key frame="745" value="3.95753" /><Key frame="751" value="29.1825" /><Key frame="757" value="3.95753" /><Key frame="763" value="39.2021" /><Key frame="770" value="44.9151" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="41" value="60.9066" /><Key frame="47" value="-21.7996" /><Key frame="53" value="60.9066" /><Key frame="59" value="-21.7996" /><Key frame="65" value="60.9066" /><Key frame="71" value="-21.7996" /><Key frame="77" value="60.9066" /><Key frame="83" value="-21.7996" /><Key frame="89" value="60.9066" /><Key frame="95" value="-21.7996" /><Key frame="101" value="60.9066" /><Key frame="107" value="-21.7996" /><Key frame="113" value="60.9066" /><Key frame="119" value="48.0744" /><Key frame="125" value="28.2" /><Key frame="131" value="13.5377" /><Key frame="137" value="28.2" /><Key frame="143" value="13.5377" /><Key frame="149" value="28.2" /><Key frame="155" value="13.5377" /><Key frame="161" value="28.2" /><Key frame="167" value="13.5377" /><Key frame="173" value="28.2" /><Key frame="179" value="13.5377" /><Key frame="185" value="28.2" /><Key frame="191" value="13.5377" /><Key frame="197" value="28.2" /><Key frame="203" value="13.5377" /><Key frame="209" value="28.2" /><Key frame="215" value="13.5377" /><Key frame="221" value="28.2" /><Key frame="233" value="25.4862" /><Key frame="239" value="25.0467" /><Key frame="245" value="25.4862" /><Key frame="251" value="25.0467" /><Key frame="257" value="25.4862" /><Key frame="263" value="25.0467" /><Key frame="269" value="25.4862" /><Key frame="275" value="25.0467" /><Key frame="281" value="25.4862" /><Key frame="287" value="25.0467" /><Key frame="293" value="25.4862" /><Key frame="299" value="25.0467" /><Key frame="305" value="25.4862" /><Key frame="311" value="25.0467" /><Key frame="317" value="25.4862" /><Key frame="323" value="25.0467" /><Key frame="329" value="25.4862" /><Key frame="335" value="25.0467" /><Key frame="341" value="25.4862" /><Key frame="347" value="25.0467" /><Key frame="353" value="25.4862" /><Key frame="359" value="25.0467" /><Key frame="367" value="32.5175" /><Key frame="376" value="60.555" /><Key frame="398" value="67.3227" /><Key frame="403" value="66.9711" /><Key frame="409" value="37.2637" /><Key frame="415" value="8.4352" /><Key frame="421" value="8.08364" /><Key frame="427" value="8.4352" /><Key frame="433" value="8.08364" /><Key frame="439" value="8.4352" /><Key frame="445" value="8.08364" /><Key frame="451" value="8.4352" /><Key frame="457" value="8.08364" /><Key frame="463" value="8.4352" /><Key frame="469" value="8.08364" /><Key frame="475" value="8.4352" /><Key frame="481" value="8.08364" /><Key frame="487" value="8.4352" /><Key frame="493" value="8.08364" /><Key frame="499" value="8.4352" /><Key frame="505" value="8.87466" /><Key frame="511" value="8.44001" /><Key frame="517" value="8.08845" /><Key frame="523" value="8.44001" /><Key frame="529" value="8.08845" /><Key frame="535" value="8.44001" /><Key frame="541" value="8.08845" /><Key frame="547" value="8.44001" /><Key frame="553" value="8.08845" /><Key frame="559" value="8.44001" /><Key frame="565" value="8.08845" /><Key frame="571" value="8.44001" /><Key frame="577" value="8.08845" /><Key frame="583" value="8.44001" /><Key frame="592" value="16.7849" /><Key frame="601" value="25.4862" /><Key frame="607" value="25.0467" /><Key frame="613" value="25.4862" /><Key frame="619" value="25.0467" /><Key frame="625" value="25.4862" /><Key frame="631" value="25.0467" /><Key frame="637" value="25.4862" /><Key frame="643" value="25.0467" /><Key frame="649" value="25.4862" /><Key frame="655" value="25.0467" /><Key frame="661" value="25.4862" /><Key frame="667" value="25.0467" /><Key frame="673" value="25.4862" /><Key frame="679" value="25.0467" /><Key frame="685" value="24.7831" /><Key frame="691" value="34.0117" /><Key frame="697" value="24.7831" /><Key frame="703" value="12.6588" /><Key frame="709" value="24.7831" /><Key frame="715" value="34.0117" /><Key frame="721" value="24.7831" /><Key frame="727" value="12.6588" /><Key frame="733" value="24.7831" /><Key frame="739" value="34.0117" /><Key frame="745" value="24.7831" /><Key frame="751" value="12.3903" /><Key frame="757" value="24.7831" /><Key frame="763" value="14.3239" /><Key frame="770" value="13" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="41" value="0.00479996" /><Key frame="47" value="0.00999999" /><Key frame="53" value="0.00479996" /><Key frame="59" value="0.00999999" /><Key frame="65" value="0.00479996" /><Key frame="71" value="0.00999999" /><Key frame="77" value="0.00479996" /><Key frame="83" value="0.00999999" /><Key frame="89" value="0.00479996" /><Key frame="95" value="0.00999999" /><Key frame="101" value="0.00479996" /><Key frame="107" value="0.00999999" /><Key frame="113" value="0.00479996" /><Key frame="119" value="0.00999999" /><Key frame="125" value="0.00440001" /><Key frame="131" value="0.00759995" /><Key frame="137" value="0.00440001" /><Key frame="143" value="0.00759995" /><Key frame="149" value="0.00440001" /><Key frame="155" value="0.00759995" /><Key frame="161" value="0.00440001" /><Key frame="167" value="0.00759995" /><Key frame="173" value="0.00440001" /><Key frame="179" value="0.00759995" /><Key frame="185" value="0.00440001" /><Key frame="191" value="0.00759995" /><Key frame="197" value="0.00440001" /><Key frame="203" value="0.00759995" /><Key frame="209" value="0.00440001" /><Key frame="215" value="0.00759995" /><Key frame="221" value="0.00440001" /><Key frame="233" value="0.0104001" /><Key frame="239" value="0.012" /><Key frame="245" value="0.0104001" /><Key frame="251" value="0.012" /><Key frame="257" value="0.0104001" /><Key frame="263" value="0.012" /><Key frame="269" value="0.0104001" /><Key frame="275" value="0.012" /><Key frame="281" value="0.0104001" /><Key frame="287" value="0.012" /><Key frame="293" value="0.0104001" /><Key frame="299" value="0.012" /><Key frame="305" value="0.0104001" /><Key frame="311" value="0.012" /><Key frame="317" value="0.0104001" /><Key frame="323" value="0.012" /><Key frame="329" value="0.0104001" /><Key frame="335" value="0.012" /><Key frame="341" value="0.0104001" /><Key frame="347" value="0.012" /><Key frame="353" value="0.0104001" /><Key frame="359" value="0.012" /><Key frame="367" value="0.0692" /><Key frame="376" value="0.2552" /><Key frame="398" value="0.3028" /><Key frame="403" value="0.3016" /><Key frame="409" value="0.1524" /><Key frame="415" value="0.0036" /><Key frame="421" value="0.0116" /><Key frame="427" value="0.0036" /><Key frame="433" value="0.0116" /><Key frame="439" value="0.0036" /><Key frame="445" value="0.0116" /><Key frame="451" value="0.0036" /><Key frame="457" value="0.0116" /><Key frame="463" value="0.0036" /><Key frame="469" value="0.0116" /><Key frame="475" value="0.0036" /><Key frame="481" value="0.0116" /><Key frame="487" value="0.0036" /><Key frame="493" value="0.0116" /><Key frame="499" value="0.0036" /><Key frame="505" value="0.00999999" /><Key frame="511" value="0.00160003" /><Key frame="517" value="0.0112" /><Key frame="523" value="0.00160003" /><Key frame="529" value="0.0112" /><Key frame="535" value="0.00160003" /><Key frame="541" value="0.0112" /><Key frame="547" value="0.00160003" /><Key frame="553" value="0.0112" /><Key frame="559" value="0.00160003" /><Key frame="565" value="0.0112" /><Key frame="571" value="0.00160003" /><Key frame="577" value="0.0112" /><Key frame="583" value="0.00160003" /><Key frame="592" value="0.0072" /><Key frame="601" value="0.0104001" /><Key frame="607" value="0.012" /><Key frame="613" value="0.0104001" /><Key frame="619" value="0.012" /><Key frame="625" value="0.0104001" /><Key frame="631" value="0.012" /><Key frame="637" value="0.0104001" /><Key frame="643" value="0.012" /><Key frame="649" value="0.0104001" /><Key frame="655" value="0.012" /><Key frame="661" value="0.0104001" /><Key frame="667" value="0.012" /><Key frame="673" value="0.0104001" /><Key frame="679" value="0.012" /><Key frame="685" value="0.0168" /><Key frame="691" value="0.0156" /><Key frame="697" value="0.0168" /><Key frame="703" value="0.0112" /><Key frame="709" value="0.0168" /><Key frame="715" value="0.0156" /><Key frame="721" value="0.0168" /><Key frame="727" value="0.0112" /><Key frame="733" value="0.0168" /><Key frame="739" value="0.0156" /><Key frame="745" value="0.0168" /><Key frame="751" value="0.0292" /><Key frame="757" value="0.0168" /><Key frame="763" value="0.0328" /><Key frame="770" value="0.03" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0"><Key frame="41" value="4.1" /><Key frame="47" value="-7.03374" /><Key frame="53" value="4.1" /><Key frame="59" value="-7.03374" /><Key frame="65" value="4.1" /><Key frame="71" value="-7.03374" /><Key frame="77" value="4.1" /><Key frame="83" value="-7.03374" /><Key frame="89" value="4.1" /><Key frame="95" value="-7.03374" /><Key frame="101" value="4.1" /><Key frame="107" value="-7.03374" /><Key frame="113" value="4.1" /><Key frame="125" value="4.1" /><Key frame="131" value="-7.55628" /><Key frame="137" value="4.1" /><Key frame="143" value="-7.55628" /><Key frame="149" value="4.1" /><Key frame="155" value="-7.55628" /><Key frame="161" value="4.1" /><Key frame="167" value="-7.55628" /><Key frame="173" value="4.1" /><Key frame="179" value="-7.55628" /><Key frame="185" value="4.1" /><Key frame="191" value="-7.55628" /><Key frame="197" value="4.1" /><Key frame="203" value="-7.55628" /><Key frame="209" value="4.1" /><Key frame="215" value="-7.55628" /><Key frame="221" value="4.1" /><Key frame="233" value="-7.55628" /><Key frame="239" value="4.1" /><Key frame="245" value="-7.55628" /><Key frame="251" value="4.1" /><Key frame="257" value="-7.55628" /><Key frame="263" value="4.1" /><Key frame="269" value="-7.55628" /><Key frame="275" value="4.1" /><Key frame="281" value="-7.55628" /><Key frame="287" value="4.1" /><Key frame="293" value="-7.55628" /><Key frame="299" value="4.1" /><Key frame="305" value="-7.55628" /><Key frame="311" value="4.1" /><Key frame="317" value="-7.55628" /><Key frame="323" value="4.1" /><Key frame="329" value="-7.55628" /><Key frame="335" value="4.1" /><Key frame="341" value="-7.55628" /><Key frame="347" value="4.1" /><Key frame="353" value="-7.55628" /><Key frame="359" value="4.1" /><Key frame="367" value="6.32579" /><Key frame="376" value="7.64417" /><Key frame="398" value="7.81997" /><Key frame="402" value="7.81997" /><Key frame="415" value="14.2361" /><Key frame="421" value="14.5876" /><Key frame="427" value="14.2361" /><Key frame="433" value="14.5876" /><Key frame="439" value="14.2361" /><Key frame="445" value="14.5876" /><Key frame="451" value="14.2361" /><Key frame="457" value="14.5876" /><Key frame="463" value="14.2361" /><Key frame="469" value="14.5876" /><Key frame="475" value="14.2361" /><Key frame="481" value="14.5876" /><Key frame="487" value="14.2361" /><Key frame="493" value="14.5876" /><Key frame="499" value="14.2361" /><Key frame="505" value="-13.9" /><Key frame="511" value="-2.54646" /><Key frame="517" value="-4.74374" /><Key frame="523" value="-2.54646" /><Key frame="529" value="-4.74374" /><Key frame="535" value="-2.54646" /><Key frame="541" value="-4.74374" /><Key frame="547" value="-2.54646" /><Key frame="553" value="-4.74374" /><Key frame="559" value="-2.54646" /><Key frame="565" value="-4.74374" /><Key frame="571" value="-2.54646" /><Key frame="577" value="-4.74374" /><Key frame="583" value="-2.54646" /><Key frame="601" value="-7.55628" /><Key frame="607" value="4.1" /><Key frame="613" value="-7.55628" /><Key frame="619" value="4.1" /><Key frame="625" value="-7.55628" /><Key frame="631" value="4.1" /><Key frame="637" value="-7.55628" /><Key frame="643" value="4.1" /><Key frame="649" value="-7.55628" /><Key frame="655" value="4.1" /><Key frame="661" value="-7.55628" /><Key frame="667" value="4.1" /><Key frame="673" value="-7.55628" /><Key frame="679" value="4.1" /><Key frame="685" value="-7.55628" /><Key frame="691" value="4.1" /><Key frame="697" value="-7.55628" /><Key frame="703" value="4.1" /><Key frame="709" value="-7.55628" /><Key frame="715" value="4.1" /><Key frame="721" value="-7.55628" /><Key frame="727" value="4.1" /><Key frame="733" value="-7.55628" /><Key frame="739" value="4.1" /><Key frame="745" value="-7.55628" /><Key frame="751" value="4.1" /><Key frame="757" value="-7.55628" /><Key frame="763" value="2.54646" /><Key frame="770" value="4.1" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0"><Key frame="41" value="-9.92936" /><Key frame="47" value="-9.92936" /><Key frame="53" value="-9.92936" /><Key frame="59" value="-9.92936" /><Key frame="65" value="-9.92936" /><Key frame="71" value="-9.92936" /><Key frame="77" value="-9.92936" /><Key frame="83" value="-9.92936" /><Key frame="89" value="-9.92936" /><Key frame="95" value="-9.92936" /><Key frame="101" value="-9.92936" /><Key frame="107" value="-9.92936" /><Key frame="113" value="-9.92936" /><Key frame="125" value="-9.92936" /><Key frame="131" value="-9.92936" /><Key frame="137" value="-9.92936" /><Key frame="143" value="-9.92936" /><Key frame="149" value="-9.92936" /><Key frame="155" value="-9.92936" /><Key frame="161" value="-9.92936" /><Key frame="167" value="-9.92936" /><Key frame="173" value="-9.92936" /><Key frame="179" value="-9.92936" /><Key frame="185" value="-9.92936" /><Key frame="191" value="-9.92936" /><Key frame="197" value="-9.92936" /><Key frame="203" value="-9.92936" /><Key frame="209" value="-9.92936" /><Key frame="215" value="-9.92936" /><Key frame="221" value="-9.92936" /><Key frame="233" value="-9.92936" /><Key frame="239" value="-9.92936" /><Key frame="245" value="-9.92936" /><Key frame="251" value="-9.92936" /><Key frame="257" value="-9.92936" /><Key frame="263" value="-9.92936" /><Key frame="269" value="-9.92936" /><Key frame="275" value="-9.92936" /><Key frame="281" value="-9.92936" /><Key frame="287" value="-9.92936" /><Key frame="293" value="-9.92936" /><Key frame="299" value="-9.92936" /><Key frame="305" value="-9.92936" /><Key frame="311" value="-9.92936" /><Key frame="317" value="-9.92936" /><Key frame="323" value="-9.92936" /><Key frame="329" value="-9.92936" /><Key frame="335" value="-9.92936" /><Key frame="341" value="-9.92936" /><Key frame="347" value="-9.92936" /><Key frame="353" value="-9.92936" /><Key frame="359" value="-9.92936" /><Key frame="367" value="-10.193" /><Key frame="376" value="-9.84147" /><Key frame="398" value="-9.84147" /><Key frame="402" value="-9.84147" /><Key frame="415" value="-13.0935" /><Key frame="421" value="-13.0935" /><Key frame="427" value="-13.0935" /><Key frame="433" value="-13.0935" /><Key frame="439" value="-13.0935" /><Key frame="445" value="-13.0935" /><Key frame="451" value="-13.0935" /><Key frame="457" value="-13.0935" /><Key frame="463" value="-13.0935" /><Key frame="469" value="-13.0935" /><Key frame="475" value="-13.0935" /><Key frame="481" value="-13.0935" /><Key frame="487" value="-13.0935" /><Key frame="493" value="-13.0935" /><Key frame="499" value="-13.0935" /><Key frame="511" value="-13.0935" /><Key frame="517" value="-13.0935" /><Key frame="523" value="-13.0935" /><Key frame="529" value="-13.0935" /><Key frame="535" value="-13.0935" /><Key frame="541" value="-13.0935" /><Key frame="547" value="-13.0935" /><Key frame="553" value="-13.0935" /><Key frame="559" value="-13.0935" /><Key frame="565" value="-13.0935" /><Key frame="571" value="-13.0935" /><Key frame="577" value="-13.0935" /><Key frame="583" value="-13.0935" /><Key frame="601" value="-9.92936" /><Key frame="607" value="-9.92936" /><Key frame="613" value="-9.92936" /><Key frame="619" value="-9.92936" /><Key frame="625" value="-9.92936" /><Key frame="631" value="-9.92936" /><Key frame="637" value="-9.92936" /><Key frame="643" value="-9.92936" /><Key frame="649" value="-9.92936" /><Key frame="655" value="-9.92936" /><Key frame="661" value="-9.92936" /><Key frame="667" value="-9.92936" /><Key frame="673" value="-9.92936" /><Key frame="679" value="-9.92936" /><Key frame="685" value="-9.92936" /><Key frame="691" value="-9.92936" /><Key frame="697" value="-9.92936" /><Key frame="703" value="-9.92936" /><Key frame="709" value="-9.92936" /><Key frame="715" value="-9.92936" /><Key frame="721" value="-9.92936" /><Key frame="727" value="-9.92936" /><Key frame="733" value="-9.92936" /><Key frame="739" value="-9.92936" /><Key frame="745" value="-9.92936" /><Key frame="751" value="-9.92936" /><Key frame="757" value="-9.92936" /><Key frame="763" value="-9.92936" /><Key frame="770" value="-9.92936" /></ActuatorCurve><ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0"><Key frame="41" value="-5.29" /><Key frame="47" value="8.17634" /><Key frame="53" value="-5.29" /><Key frame="59" value="8.17634" /><Key frame="65" value="-5.29" /><Key frame="71" value="8.17634" /><Key frame="77" value="-5.29" /><Key frame="83" value="8.17634" /><Key frame="89" value="-5.29" /><Key frame="95" value="8.17634" /><Key frame="101" value="-5.29" /><Key frame="107" value="8.17634" /><Key frame="113" value="-5.29" /><Key frame="125" value="-5.29" /><Key frame="131" value="7.73207" /><Key frame="137" value="-5.29" /><Key frame="143" value="7.73207" /><Key frame="149" value="-5.29" /><Key frame="155" value="7.73207" /><Key frame="161" value="-5.29" /><Key frame="167" value="7.73207" /><Key frame="173" value="-5.29" /><Key frame="179" value="7.73207" /><Key frame="185" value="-5.29" /><Key frame="191" value="7.73207" /><Key frame="197" value="-5.29" /><Key frame="203" value="7.73207" /><Key frame="209" value="-5.29" /><Key frame="215" value="7.73207" /><Key frame="221" value="-5.29" /><Key frame="233" value="7.73207" /><Key frame="239" value="-5.29" /><Key frame="245" value="7.73207" /><Key frame="251" value="-5.29" /><Key frame="257" value="7.73207" /><Key frame="263" value="-5.29" /><Key frame="269" value="7.73207" /><Key frame="275" value="-5.29" /><Key frame="281" value="7.73207" /><Key frame="287" value="-5.29" /><Key frame="293" value="7.73207" /><Key frame="299" value="-5.29" /><Key frame="305" value="7.73207" /><Key frame="311" value="-5.29" /><Key frame="317" value="7.73207" /><Key frame="323" value="-5.29" /><Key frame="329" value="7.73207" /><Key frame="335" value="-5.29" /><Key frame="341" value="7.73207" /><Key frame="347" value="-5.29" /><Key frame="353" value="7.73207" /><Key frame="359" value="-5.29" /><Key frame="367" value="-5.29" /><Key frame="376" value="-5.2711" /><Key frame="398" value="-5.09532" /><Key frame="402" value="-5.00743" /><Key frame="415" value="-5.09532" /><Key frame="421" value="-4.83163" /><Key frame="427" value="-5.09532" /><Key frame="433" value="-4.83163" /><Key frame="439" value="-5.09532" /><Key frame="445" value="-4.83163" /><Key frame="451" value="-5.09532" /><Key frame="457" value="-4.83163" /><Key frame="463" value="-5.09532" /><Key frame="469" value="-4.83163" /><Key frame="475" value="-5.09532" /><Key frame="481" value="-4.83163" /><Key frame="487" value="-5.09532" /><Key frame="493" value="-4.83163" /><Key frame="499" value="-5.09532" /><Key frame="505" value="20" /><Key frame="511" value="35.0664" /><Key frame="517" value="41.2188" /><Key frame="523" value="35.0664" /><Key frame="529" value="41.2188" /><Key frame="535" value="35.0664" /><Key frame="541" value="41.2188" /><Key frame="547" value="35.0664" /><Key frame="553" value="41.2188" /><Key frame="559" value="35.0664" /><Key frame="565" value="41.2188" /><Key frame="571" value="35.0664" /><Key frame="577" value="41.2188" /><Key frame="583" value="35.0664" /><Key frame="601" value="7.73207" /><Key frame="607" value="-5.29" /><Key frame="613" value="7.73207" /><Key frame="619" value="-5.29" /><Key frame="625" value="7.73207" /><Key frame="631" value="-5.29" /><Key frame="637" value="7.73207" /><Key frame="643" value="-5.29" /><Key frame="649" value="7.73207" /><Key frame="655" value="-5.29" /><Key frame="661" value="7.73207" /><Key frame="667" value="-5.29" /><Key frame="673" value="7.73207" /><Key frame="679" value="-5.29" /><Key frame="685" value="7.73207" /><Key frame="691" value="-5.29" /><Key frame="697" value="7.73207" /><Key frame="703" value="-5.29" /><Key frame="709" value="7.73207" /><Key frame="715" value="-5.29" /><Key frame="721" value="7.73207" /><Key frame="727" value="-5.29" /><Key frame="733" value="7.73207" /><Key frame="739" value="-5.29" /><Key frame="745" value="7.73207" /><Key frame="751" value="-5.29" /><Key frame="757" value="7.73207" /><Key frame="763" value="-3.33748" /><Key frame="770" value="-5.29" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="41" value="-82.7037" /><Key frame="47" value="-73.3907" /><Key frame="53" value="-82.7037" /><Key frame="59" value="-73.3907" /><Key frame="65" value="-82.7037" /><Key frame="71" value="-73.3907" /><Key frame="77" value="-82.7037" /><Key frame="83" value="-73.3907" /><Key frame="89" value="-82.7037" /><Key frame="95" value="-73.3907" /><Key frame="101" value="-82.7037" /><Key frame="107" value="-73.3907" /><Key frame="113" value="-82.7037" /><Key frame="119" value="-52.8205" /><Key frame="125" value="13.0056" /><Key frame="131" value="22.65" /><Key frame="137" value="13.0056" /><Key frame="143" value="22.65" /><Key frame="149" value="13.0056" /><Key frame="155" value="22.65" /><Key frame="161" value="13.0056" /><Key frame="167" value="22.65" /><Key frame="173" value="13.0056" /><Key frame="179" value="22.65" /><Key frame="185" value="13.0056" /><Key frame="191" value="22.65" /><Key frame="197" value="13.0056" /><Key frame="203" value="22.65" /><Key frame="209" value="13.0056" /><Key frame="215" value="22.65" /><Key frame="221" value="13.0056" /><Key frame="233" value="-0.8" /><Key frame="239" value="8.82782" /><Key frame="245" value="-0.8" /><Key frame="251" value="8.82781" /><Key frame="257" value="-0.8" /><Key frame="263" value="8.82781" /><Key frame="269" value="-0.8" /><Key frame="275" value="8.82781" /><Key frame="281" value="-0.8" /><Key frame="287" value="8.82781" /><Key frame="293" value="-0.8" /><Key frame="299" value="8.82781" /><Key frame="305" value="-0.8" /><Key frame="311" value="8.82781" /><Key frame="317" value="-0.8" /><Key frame="323" value="8.82781" /><Key frame="329" value="-0.8" /><Key frame="335" value="8.82781" /><Key frame="341" value="-0.8" /><Key frame="347" value="8.82781" /><Key frame="353" value="-0.8" /><Key frame="359" value="8.82781" /><Key frame="367" value="35.7743" /><Key frame="376" value="77.3471" /><Key frame="398" value="84.9058" /><Key frame="403" value="85.2574" /><Key frame="409" value="89.2125" /><Key frame="415" value="91.8493" /><Key frame="421" value="92.2008" /><Key frame="427" value="91.8493" /><Key frame="433" value="92.2008" /><Key frame="439" value="91.8493" /><Key frame="445" value="92.2008" /><Key frame="451" value="91.8493" /><Key frame="457" value="92.2008" /><Key frame="463" value="91.8493" /><Key frame="469" value="92.2008" /><Key frame="475" value="91.8493" /><Key frame="481" value="92.2008" /><Key frame="487" value="91.8493" /><Key frame="493" value="92.2008" /><Key frame="499" value="91.8493" /><Key frame="505" value="91.4098" /><Key frame="511" value="91.8445" /><Key frame="517" value="92.2839" /><Key frame="523" value="91.8445" /><Key frame="529" value="92.2839" /><Key frame="535" value="91.8445" /><Key frame="541" value="92.2839" /><Key frame="547" value="91.8445" /><Key frame="553" value="92.2839" /><Key frame="559" value="91.8445" /><Key frame="565" value="92.2839" /><Key frame="571" value="91.8445" /><Key frame="577" value="92.2839" /><Key frame="583" value="91.8445" /><Key frame="592" value="46.585" /><Key frame="601" value="-0.8" /><Key frame="607" value="8.82782" /><Key frame="613" value="-0.8" /><Key frame="619" value="8.82781" /><Key frame="625" value="-0.8" /><Key frame="631" value="8.82781" /><Key frame="637" value="-0.8" /><Key frame="643" value="8.82781" /><Key frame="649" value="-0.8" /><Key frame="655" value="8.82781" /><Key frame="661" value="-0.8" /><Key frame="667" value="8.82781" /><Key frame="673" value="-0.8" /><Key frame="679" value="8.82781" /><Key frame="685" value="2.72705" /><Key frame="691" value="-4.04062" /><Key frame="697" value="2.72705" /><Key frame="703" value="11.7751" /><Key frame="709" value="2.72705" /><Key frame="715" value="-4.04062" /><Key frame="721" value="2.72705" /><Key frame="727" value="11.7751" /><Key frame="733" value="2.72705" /><Key frame="739" value="-4.04062" /><Key frame="745" value="2.72705" /><Key frame="751" value="13.8014" /><Key frame="757" value="2.72705" /><Key frame="763" value="-11.9509" /><Key frame="770" value="-19" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="41" value="-18.987" /><Key frame="47" value="-16.2624" /><Key frame="53" value="-18.987" /><Key frame="59" value="-16.2624" /><Key frame="65" value="-18.987" /><Key frame="71" value="-16.2624" /><Key frame="77" value="-18.987" /><Key frame="83" value="-16.2624" /><Key frame="89" value="-18.987" /><Key frame="95" value="-16.2624" /><Key frame="101" value="-18.987" /><Key frame="107" value="-16.2624" /><Key frame="113" value="-18.987" /><Key frame="119" value="-8.87946" /><Key frame="125" value="-6.94104" /><Key frame="131" value="-8.08364" /><Key frame="137" value="-6.94104" /><Key frame="143" value="-8.08364" /><Key frame="149" value="-6.94104" /><Key frame="155" value="-8.08364" /><Key frame="161" value="-6.94104" /><Key frame="167" value="-8.08364" /><Key frame="173" value="-6.94104" /><Key frame="179" value="-8.08364" /><Key frame="185" value="-6.94104" /><Key frame="191" value="-8.08364" /><Key frame="197" value="-6.94104" /><Key frame="203" value="-8.08364" /><Key frame="209" value="-6.94104" /><Key frame="215" value="-8.08364" /><Key frame="221" value="-6.94104" /><Key frame="233" value="15.906" /><Key frame="239" value="15.3786" /><Key frame="245" value="15.906" /><Key frame="251" value="15.3786" /><Key frame="257" value="15.906" /><Key frame="263" value="15.3786" /><Key frame="269" value="15.906" /><Key frame="275" value="15.3786" /><Key frame="281" value="15.906" /><Key frame="287" value="15.3786" /><Key frame="293" value="15.906" /><Key frame="299" value="15.3786" /><Key frame="305" value="15.906" /><Key frame="311" value="15.3786" /><Key frame="317" value="15.906" /><Key frame="323" value="15.3786" /><Key frame="329" value="15.906" /><Key frame="335" value="15.3786" /><Key frame="341" value="15.906" /><Key frame="347" value="15.3786" /><Key frame="353" value="15.906" /><Key frame="359" value="15.3786" /><Key frame="367" value="10.7204" /><Key frame="376" value="-2.37549" /><Key frame="398" value="-5.80326" /><Key frame="403" value="-4.22121" /><Key frame="409" value="-43.2451" /><Key frame="415" value="-47.376" /><Key frame="421" value="-44.0362" /><Key frame="427" value="-47.376" /><Key frame="433" value="-44.0362" /><Key frame="439" value="-47.376" /><Key frame="445" value="-44.0362" /><Key frame="451" value="-47.376" /><Key frame="457" value="-44.0362" /><Key frame="463" value="-47.376" /><Key frame="469" value="-44.0362" /><Key frame="475" value="-47.376" /><Key frame="481" value="-44.0362" /><Key frame="487" value="-47.376" /><Key frame="493" value="-44.0362" /><Key frame="499" value="-47.376" /><Key frame="505" value="-56.5168" /><Key frame="511" value="-47.9865" /><Key frame="517" value="-43.9435" /><Key frame="523" value="-47.9865" /><Key frame="529" value="-43.9435" /><Key frame="535" value="-47.9865" /><Key frame="541" value="-43.9435" /><Key frame="547" value="-47.9865" /><Key frame="553" value="-43.9435" /><Key frame="559" value="-47.9865" /><Key frame="565" value="-43.9435" /><Key frame="571" value="-47.9865" /><Key frame="577" value="-43.9435" /><Key frame="583" value="-47.9865" /><Key frame="601" value="15.906" /><Key frame="607" value="15.3786" /><Key frame="613" value="15.906" /><Key frame="619" value="15.3786" /><Key frame="625" value="15.906" /><Key frame="631" value="15.3786" /><Key frame="637" value="15.906" /><Key frame="643" value="15.3786" /><Key frame="649" value="15.906" /><Key frame="655" value="15.3786" /><Key frame="661" value="15.906" /><Key frame="667" value="15.3786" /><Key frame="673" value="15.906" /><Key frame="679" value="15.3786" /><Key frame="685" value="0.173378" /><Key frame="691" value="18" /><Key frame="697" value="0.173378" /><Key frame="703" value="17.3171" /><Key frame="709" value="0.173378" /><Key frame="715" value="18" /><Key frame="721" value="0.173378" /><Key frame="727" value="17.3171" /><Key frame="733" value="0.173378" /><Key frame="739" value="18" /><Key frame="745" value="0.173378" /><Key frame="751" value="16.3455" /><Key frame="757" value="0.173378" /><Key frame="763" value="14.8513" /><Key frame="770" value="18" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="41" value="6.58948" /><Key frame="47" value="27.6835" /><Key frame="53" value="6.58948" /><Key frame="59" value="27.6835" /><Key frame="65" value="6.58948" /><Key frame="71" value="27.6835" /><Key frame="77" value="6.58948" /><Key frame="83" value="27.6835" /><Key frame="89" value="6.58948" /><Key frame="95" value="27.6835" /><Key frame="101" value="6.58948" /><Key frame="107" value="27.6835" /><Key frame="113" value="6.58948" /><Key frame="119" value="-3.51807" /><Key frame="125" value="-6.06212" /><Key frame="131" value="-6.06212" /><Key frame="137" value="-6.06212" /><Key frame="143" value="-6.06212" /><Key frame="149" value="-6.06212" /><Key frame="155" value="-6.06212" /><Key frame="161" value="-6.06212" /><Key frame="167" value="-6.06212" /><Key frame="173" value="-6.06212" /><Key frame="179" value="-6.06212" /><Key frame="185" value="-6.06212" /><Key frame="191" value="-6.06212" /><Key frame="197" value="-6.06212" /><Key frame="203" value="-6.06212" /><Key frame="209" value="-6.06212" /><Key frame="215" value="-6.06212" /><Key frame="221" value="-6.06212" /><Key frame="233" value="-31.3797" /><Key frame="239" value="-31.2919" /><Key frame="245" value="-31.3797" /><Key frame="251" value="-31.2919" /><Key frame="257" value="-31.3797" /><Key frame="263" value="-31.2919" /><Key frame="269" value="-31.3797" /><Key frame="275" value="-31.2919" /><Key frame="281" value="-31.3797" /><Key frame="287" value="-31.2919" /><Key frame="293" value="-31.3797" /><Key frame="299" value="-31.2919" /><Key frame="305" value="-31.3797" /><Key frame="311" value="-31.2919" /><Key frame="317" value="-31.3797" /><Key frame="323" value="-31.2919" /><Key frame="329" value="-31.3797" /><Key frame="335" value="-31.2919" /><Key frame="341" value="-31.3797" /><Key frame="347" value="-31.2919" /><Key frame="353" value="-31.3797" /><Key frame="359" value="-31.2919" /><Key frame="367" value="-24.9637" /><Key frame="376" value="-0.178186" /><Key frame="398" value="4.65585" /><Key frame="403" value="4.12851" /><Key frame="409" value="4.30429" /><Key frame="415" value="4.39218" /><Key frame="421" value="4.39218" /><Key frame="427" value="4.39218" /><Key frame="433" value="4.39218" /><Key frame="439" value="4.39218" /><Key frame="445" value="4.39218" /><Key frame="451" value="4.39218" /><Key frame="457" value="4.39218" /><Key frame="463" value="4.39218" /><Key frame="469" value="4.39218" /><Key frame="475" value="4.39218" /><Key frame="481" value="4.39218" /><Key frame="487" value="4.39218" /><Key frame="493" value="4.39218" /><Key frame="499" value="4.39218" /><Key frame="505" value="-0.0902951" /><Key frame="511" value="-5.00743" /><Key frame="517" value="-4.91954" /><Key frame="523" value="-5.00743" /><Key frame="529" value="-4.91954" /><Key frame="535" value="-5.00743" /><Key frame="541" value="-4.91954" /><Key frame="547" value="-5.00743" /><Key frame="553" value="-4.91954" /><Key frame="559" value="-5.00743" /><Key frame="565" value="-4.91954" /><Key frame="571" value="-5.00743" /><Key frame="577" value="-4.91954" /><Key frame="583" value="-5.00743" /><Key frame="592" value="-17.7565" /><Key frame="601" value="-31.3797" /><Key frame="607" value="-31.2919" /><Key frame="613" value="-31.3797" /><Key frame="619" value="-31.2919" /><Key frame="625" value="-31.3797" /><Key frame="631" value="-31.2919" /><Key frame="637" value="-31.3797" /><Key frame="643" value="-31.2919" /><Key frame="649" value="-31.3797" /><Key frame="655" value="-31.2919" /><Key frame="661" value="-31.3797" /><Key frame="667" value="-31.2919" /><Key frame="673" value="-31.3797" /><Key frame="679" value="-31.2919" /><Key frame="685" value="-30.5008" /><Key frame="691" value="-30.9403" /><Key frame="697" value="-30.5008" /><Key frame="703" value="-48.338" /><Key frame="709" value="-30.5008" /><Key frame="715" value="-30.9403" /><Key frame="721" value="-30.5008" /><Key frame="727" value="-48.338" /><Key frame="733" value="-30.5008" /><Key frame="739" value="-30.9403" /><Key frame="745" value="-30.5008" /><Key frame="751" value="-47.5518" /><Key frame="757" value="-30.5008" /><Key frame="763" value="-30.8524" /><Key frame="770" value="-29.9735" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="367" value="-0.881327" /><Key frame="376" value="-0.969218" /><Key frame="398" value="-0.881327" /><Key frame="402" value="-1.05711" /><Key frame="415" value="-59.9446" /><Key frame="421" value="-59.7688" /><Key frame="427" value="-59.9446" /><Key frame="433" value="-59.7688" /><Key frame="439" value="-59.9446" /><Key frame="445" value="-59.7688" /><Key frame="451" value="-59.9446" /><Key frame="457" value="-59.7688" /><Key frame="463" value="-59.9446" /><Key frame="469" value="-59.7688" /><Key frame="475" value="-59.9446" /><Key frame="481" value="-59.7688" /><Key frame="487" value="-59.9446" /><Key frame="493" value="-59.7688" /><Key frame="499" value="-59.9446" /><Key frame="511" value="59.9446" /><Key frame="517" value="59.7688" /><Key frame="523" value="59.9446" /><Key frame="529" value="59.7688" /><Key frame="535" value="59.9446" /><Key frame="541" value="59.7688" /><Key frame="547" value="59.9446" /><Key frame="553" value="59.7688" /><Key frame="559" value="59.9446" /><Key frame="565" value="59.7688" /><Key frame="571" value="59.9446" /><Key frame="577" value="59.7688" /><Key frame="583" value="59.9446" /><Key frame="601" value="0" /><Key frame="619" value="0" /><Key frame="637" value="-39.8429" /><Key frame="655" value="40" /><Key frame="673" value="-40" /><Key frame="691" value="0" /><Key frame="763" value="-0.0902951" /></ActuatorCurve><ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0"><Key frame="233" value="-6.67737" /><Key frame="239" value="-6.67737" /><Key frame="245" value="-6.67737" /><Key frame="251" value="-6.67737" /><Key frame="257" value="-6.67737" /><Key frame="263" value="-6.67737" /><Key frame="269" value="-6.67737" /><Key frame="275" value="-6.67737" /><Key frame="281" value="-6.67737" /><Key frame="287" value="-6.67737" /><Key frame="293" value="-6.67737" /><Key frame="299" value="-6.67737" /><Key frame="305" value="-6.67737" /><Key frame="311" value="-6.67737" /><Key frame="317" value="-6.67737" /><Key frame="323" value="-6.67737" /><Key frame="329" value="-6.67737" /><Key frame="335" value="-6.67737" /><Key frame="341" value="-6.67737" /><Key frame="347" value="-6.67737" /><Key frame="353" value="-6.67737" /><Key frame="359" value="-6.67737" /><Key frame="367" value="-6.50159" /><Key frame="376" value="-6.50159" /><Key frame="398" value="-6.50159" /><Key frame="402" value="-6.50159" /><Key frame="415" value="3.1665" /><Key frame="421" value="4.39699" /><Key frame="427" value="3.1665" /><Key frame="433" value="4.39699" /><Key frame="439" value="3.1665" /><Key frame="445" value="4.39699" /><Key frame="451" value="3.1665" /><Key frame="457" value="4.39699" /><Key frame="463" value="3.1665" /><Key frame="469" value="4.39699" /><Key frame="475" value="3.1665" /><Key frame="481" value="4.39699" /><Key frame="487" value="3.1665" /><Key frame="493" value="4.39699" /><Key frame="499" value="3.1665" /><Key frame="511" value="-13.4498" /><Key frame="517" value="-14.8561" /><Key frame="523" value="-13.4498" /><Key frame="529" value="-14.8561" /><Key frame="535" value="-13.4498" /><Key frame="541" value="-14.8561" /><Key frame="547" value="-13.4498" /><Key frame="553" value="-14.8561" /><Key frame="559" value="-13.4498" /><Key frame="565" value="-14.8561" /><Key frame="571" value="-13.4498" /><Key frame="577" value="-14.8561" /><Key frame="583" value="-13.4498" /><Key frame="601" value="-6.67737" /><Key frame="607" value="-6.67737" /><Key frame="613" value="-6.67737" /><Key frame="619" value="-6.67737" /><Key frame="625" value="-6.67737" /><Key frame="631" value="-6.67737" /><Key frame="637" value="-6.67737" /><Key frame="643" value="-6.67737" /><Key frame="649" value="-6.67737" /><Key frame="655" value="-6.67737" /><Key frame="661" value="-6.67737" /><Key frame="667" value="-6.67737" /><Key frame="673" value="-6.67737" /><Key frame="679" value="-6.67737" /><Key frame="685" value="-6.67737" /><Key frame="691" value="-6.67737" /><Key frame="697" value="-6.67737" /><Key frame="703" value="-6.67737" /><Key frame="709" value="-6.67737" /><Key frame="715" value="-6.67737" /><Key frame="721" value="-6.67737" /><Key frame="727" value="-6.67737" /><Key frame="733" value="-6.67737" /><Key frame="739" value="-6.67737" /><Key frame="745" value="-6.67737" /><Key frame="751" value="-6.67737" /><Key frame="757" value="-6.67737" /><Key frame="763" value="-6.67737" /><Key frame="770" value="-6.67737" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0"><Key frame="233" value="6.59429" /><Key frame="239" value="6.59429" /><Key frame="245" value="6.59429" /><Key frame="251" value="6.59429" /><Key frame="257" value="6.59429" /><Key frame="263" value="6.59429" /><Key frame="269" value="6.59429" /><Key frame="275" value="6.59429" /><Key frame="281" value="6.59429" /><Key frame="287" value="6.59429" /><Key frame="293" value="6.59429" /><Key frame="299" value="6.59429" /><Key frame="305" value="6.59429" /><Key frame="311" value="6.59429" /><Key frame="317" value="6.59429" /><Key frame="323" value="6.59429" /><Key frame="329" value="6.59429" /><Key frame="335" value="6.59429" /><Key frame="341" value="6.59429" /><Key frame="347" value="6.59429" /><Key frame="353" value="6.59429" /><Key frame="359" value="6.59429" /><Key frame="367" value="6.41851" /><Key frame="376" value="6.5064" /><Key frame="398" value="6.41851" /><Key frame="402" value="6.5064" /><Key frame="415" value="0.441859" /><Key frame="421" value="0.61764" /><Key frame="427" value="0.441859" /><Key frame="433" value="0.61764" /><Key frame="439" value="0.441859" /><Key frame="445" value="0.61764" /><Key frame="451" value="0.441859" /><Key frame="457" value="0.61764" /><Key frame="463" value="0.441859" /><Key frame="469" value="0.61764" /><Key frame="475" value="0.441859" /><Key frame="481" value="0.61764" /><Key frame="487" value="0.441859" /><Key frame="493" value="0.61764" /><Key frame="499" value="0.441859" /><Key frame="511" value="10.9841" /><Key frame="517" value="10.9841" /><Key frame="523" value="10.9841" /><Key frame="529" value="10.9841" /><Key frame="535" value="10.9841" /><Key frame="541" value="10.9841" /><Key frame="547" value="10.9841" /><Key frame="553" value="10.9841" /><Key frame="559" value="10.9841" /><Key frame="565" value="10.9841" /><Key frame="571" value="10.9841" /><Key frame="577" value="10.9841" /><Key frame="583" value="10.9841" /><Key frame="601" value="6.59429" /><Key frame="607" value="6.59429" /><Key frame="613" value="6.59429" /><Key frame="619" value="6.59429" /><Key frame="625" value="6.59429" /><Key frame="631" value="6.59429" /><Key frame="637" value="6.59429" /><Key frame="643" value="6.59429" /><Key frame="649" value="6.59429" /><Key frame="655" value="6.59429" /><Key frame="661" value="6.59429" /><Key frame="667" value="6.59429" /><Key frame="673" value="6.59429" /><Key frame="679" value="6.59429" /><Key frame="685" value="6.59429" /><Key frame="691" value="6.59429" /><Key frame="697" value="6.59429" /><Key frame="703" value="6.59429" /><Key frame="709" value="6.59429" /><Key frame="715" value="6.59429" /><Key frame="721" value="6.59429" /><Key frame="727" value="6.59429" /><Key frame="733" value="6.59429" /><Key frame="739" value="6.59429" /><Key frame="745" value="6.59429" /><Key frame="751" value="6.59429" /><Key frame="757" value="6.59429" /><Key frame="763" value="6.68218" /><Key frame="770" value="6.59429" /></ActuatorCurve><ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0"><Key frame="233" value="4.22121" /><Key frame="239" value="4.22121" /><Key frame="245" value="4.22121" /><Key frame="251" value="4.22121" /><Key frame="257" value="4.22121" /><Key frame="263" value="4.22121" /><Key frame="269" value="4.22121" /><Key frame="275" value="4.22121" /><Key frame="281" value="4.22121" /><Key frame="287" value="4.22121" /><Key frame="293" value="4.22121" /><Key frame="299" value="4.22121" /><Key frame="305" value="4.22121" /><Key frame="311" value="4.22121" /><Key frame="317" value="4.22121" /><Key frame="323" value="4.22121" /><Key frame="329" value="4.22121" /><Key frame="335" value="4.22121" /><Key frame="341" value="4.22121" /><Key frame="347" value="4.22121" /><Key frame="353" value="4.22121" /><Key frame="359" value="4.22121" /><Key frame="367" value="4.04543" /><Key frame="376" value="4.04543" /><Key frame="398" value="4.04543" /><Key frame="402" value="4.13332" /><Key frame="415" value="13.4498" /><Key frame="421" value="14.8561" /><Key frame="427" value="13.4498" /><Key frame="433" value="14.8561" /><Key frame="439" value="13.4498" /><Key frame="445" value="14.8561" /><Key frame="451" value="13.4498" /><Key frame="457" value="14.8561" /><Key frame="463" value="13.4498" /><Key frame="469" value="14.8561" /><Key frame="475" value="13.4498" /><Key frame="481" value="14.8561" /><Key frame="487" value="13.4498" /><Key frame="493" value="14.8561" /><Key frame="499" value="13.4498" /><Key frame="511" value="-3.1665" /><Key frame="517" value="-4.39699" /><Key frame="523" value="-3.1665" /><Key frame="529" value="-4.39699" /><Key frame="535" value="-3.1665" /><Key frame="541" value="-4.39699" /><Key frame="547" value="-3.1665" /><Key frame="553" value="-4.39699" /><Key frame="559" value="-3.1665" /><Key frame="565" value="-4.39699" /><Key frame="571" value="-3.1665" /><Key frame="577" value="-4.39699" /><Key frame="583" value="-3.1665" /><Key frame="601" value="4.22121" /><Key frame="607" value="4.22121" /><Key frame="613" value="4.22121" /><Key frame="619" value="4.22121" /><Key frame="625" value="4.22121" /><Key frame="631" value="4.22121" /><Key frame="637" value="4.22121" /><Key frame="643" value="4.22121" /><Key frame="649" value="4.22121" /><Key frame="655" value="4.22121" /><Key frame="661" value="4.22121" /><Key frame="667" value="4.22121" /><Key frame="673" value="4.22121" /><Key frame="679" value="4.22121" /><Key frame="685" value="4.22121" /><Key frame="691" value="4.22121" /><Key frame="697" value="4.22121" /><Key frame="703" value="4.22121" /><Key frame="709" value="4.22121" /><Key frame="715" value="4.22121" /><Key frame="721" value="4.22121" /><Key frame="727" value="4.22121" /><Key frame="733" value="4.22121" /><Key frame="739" value="4.22121" /><Key frame="745" value="4.22121" /><Key frame="751" value="4.22121" /><Key frame="757" value="4.22121" /><Key frame="763" value="4.22121" /><Key frame="770" value="4.22121" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0"><Key frame="233" value="-3.68905" /><Key frame="239" value="-3.68905" /><Key frame="245" value="-3.68905" /><Key frame="251" value="-3.68905" /><Key frame="257" value="-3.68905" /><Key frame="263" value="-3.68905" /><Key frame="269" value="-3.68905" /><Key frame="275" value="-3.68905" /><Key frame="281" value="-3.68905" /><Key frame="287" value="-3.68905" /><Key frame="293" value="-3.68905" /><Key frame="299" value="-3.68905" /><Key frame="305" value="-3.68905" /><Key frame="311" value="-3.68905" /><Key frame="317" value="-3.68905" /><Key frame="323" value="-3.68905" /><Key frame="329" value="-3.68905" /><Key frame="335" value="-3.68905" /><Key frame="341" value="-3.68905" /><Key frame="347" value="-3.68905" /><Key frame="353" value="-3.68905" /><Key frame="359" value="-3.68905" /><Key frame="367" value="-3.42537" /><Key frame="376" value="-3.51326" /><Key frame="398" value="-3.42537" /><Key frame="402" value="-3.51326" /><Key frame="415" value="-10.9841" /><Key frame="421" value="-10.9841" /><Key frame="427" value="-10.9841" /><Key frame="433" value="-10.9841" /><Key frame="439" value="-10.9841" /><Key frame="445" value="-10.9841" /><Key frame="451" value="-10.9841" /><Key frame="457" value="-10.9841" /><Key frame="463" value="-10.9841" /><Key frame="469" value="-10.9841" /><Key frame="475" value="-10.9841" /><Key frame="481" value="-10.9841" /><Key frame="487" value="-10.9841" /><Key frame="493" value="-10.9841" /><Key frame="499" value="-10.9841" /><Key frame="511" value="-0.441859" /><Key frame="517" value="-0.61764" /><Key frame="523" value="-0.441859" /><Key frame="529" value="-0.61764" /><Key frame="535" value="-0.441859" /><Key frame="541" value="-0.61764" /><Key frame="547" value="-0.441859" /><Key frame="553" value="-0.61764" /><Key frame="559" value="-0.441859" /><Key frame="565" value="-0.61764" /><Key frame="571" value="-0.441859" /><Key frame="577" value="-0.61764" /><Key frame="583" value="-0.441859" /><Key frame="601" value="-3.68905" /><Key frame="607" value="-3.68905" /><Key frame="613" value="-3.68905" /><Key frame="619" value="-3.68905" /><Key frame="625" value="-3.68905" /><Key frame="631" value="-3.68905" /><Key frame="637" value="-3.68905" /><Key frame="643" value="-3.68905" /><Key frame="649" value="-3.68905" /><Key frame="655" value="-3.68905" /><Key frame="661" value="-3.68905" /><Key frame="667" value="-3.68905" /><Key frame="673" value="-3.68905" /><Key frame="679" value="-3.68905" /><Key frame="685" value="-3.68905" /><Key frame="691" value="-3.68905" /><Key frame="697" value="-3.68905" /><Key frame="703" value="-3.68905" /><Key frame="709" value="-3.68905" /><Key frame="715" value="-3.68905" /><Key frame="721" value="-3.68905" /><Key frame="727" value="-3.68905" /><Key frame="733" value="-3.68905" /><Key frame="739" value="-3.68905" /><Key frame="745" value="-3.68905" /><Key frame="751" value="-3.68905" /><Key frame="757" value="-3.68905" /><Key frame="763" value="-3.68905" /><Key frame="770" value="-3.68905" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="GoToPose" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="133" y="38"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="35"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="35" value="-22.5027" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="35" value="0.261268" /></ActuatorCurve><ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0"><Key frame="35" value="5.2711" /></ActuatorCurve><ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0"><Key frame="35" value="-6.76526" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="35" value="-87.5378" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="35" value="-28.2" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="35" value="0.00440001" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0"><Key frame="35" value="4.1" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0"><Key frame="35" value="6.41851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0"><Key frame="35" value="-9.92936" /></ActuatorCurve><ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0"><Key frame="35" value="-5.18802" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="35" value="13.0056" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="35" value="6.94104" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="35" value="6.06212" /></ActuatorCurve><ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0"><Key frame="35" value="5.80326" /></ActuatorCurve><ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0"><Key frame="35" value="4.3091" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="35" value="20.0417" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="35" value="60.9066" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="35" value="0.00479996" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0"><Key frame="35" value="4.1" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0"><Key frame="35" value="-3.51326" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0"><Key frame="35" value="-9.92936" /></ActuatorCurve><ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0"><Key frame="35" value="-5.29" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="35" value="-82.7037" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="35" value="-18.987" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="35" value="6.58948" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="Music" id="5" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="313" y="148"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="-1"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe9" index="9"><Diagram><Box name="Play Sound" id="1" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be&#x0A;wav, mp3, or ogg.&#x0A;&#x0A;Note: There can be some delay to play mp3 files. We advise you to use wav if&#x0A;you want a fast play of the file." x="61" y="28"><bitmap>media/images/box/interaction/play_music.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if(self.bIsRunning):
            self.onUnload()
            self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" /><Parameter name="File name" inherits_from_parent="0" content_type="4" value="/sounds/gangnam-style.ogg" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" /><Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" /><Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" /><Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" /><Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70"><bitmap>media/images/box/interaction/play_music.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)
        self.player = ALProxy('ALAudioPlayer')
        self.playerStop = ALProxy('ALAudioPlayer', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while(self.bIsRunning):
            time.sleep(0.2)

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.post.playFileInLoop(p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.post.playFileFromPosition(p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if(self.ids == []):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" /><Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" /><Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" /><Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" /></Box><Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71"><bitmap>media/images/box/folder.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.framemanager = ALProxy("ALFrameManager")

    def onInput_onStart(self):
        self.onStopped(self.framemanager.getBehaviorPath(self.behaviorId) + self.getParameter("File name"))]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" /><Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" /></Box><Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Stand" id="6" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="601" y="38"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="30"><BehaviorLayer name="LED"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="EyesOnOff" id="17" localization="8" tooltip="tags:&#x0A;LED" x="78" y="32"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = self.getParameter('Timing')

        self.log(self.getParameter('Eyes'))

        if(self.getParameter('Eyes') == 'On'):
            nColor = 0xFFFFFF
        else:
            nColor = 0x000000

        ALLeds.fadeRGB("AllLeds", nColor, rDuration);

        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Parameter name="Eyes" inherits_from_parent="0" content_type="3" value="On" default_value="On" custom_choice="0" tooltip="" id="5"><Choice value="On" /><Choice value="Off" /></Parameter><Parameter name="Timing" inherits_from_parent="0" content_type="2" value="2" default_value="0.5" min="0.05" max="10.05" tooltip="" id="6" /><Resource name="Left eye leds" type="Lock" timeout="0" /><Resource name="Right eye leds" type="Lock" timeout="0" /></Box><Link inputowner="17" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe></BehaviorLayer><ActuatorList model="nao"><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="30" value="-10.3736" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="30" value="-0.705531" /></ActuatorCurve><ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0"><Key frame="30" value="5.53478" /></ActuatorCurve><ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0"><Key frame="30" value="-6.67737" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="30" value="-22.5858" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="30" value="-68.7337" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="30" value="0.2968" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0"><Key frame="30" value="7.73688" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0"><Key frame="30" value="6.59429" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0"><Key frame="30" value="-10.0173" /></ActuatorCurve><ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0"><Key frame="30" value="-5.18802" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="30" value="86.6588" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="30" value="6.94104" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="30" value="6.32579" /></ActuatorCurve><ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0"><Key frame="30" value="5.80326" /></ActuatorCurve><ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0"><Key frame="30" value="4.22121" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="30" value="22.7664" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="30" value="66.9711" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="30" value="0.3044" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0"><Key frame="30" value="7.55628" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0"><Key frame="30" value="-3.68905" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0"><Key frame="30" value="-10.0173" /></ActuatorCurve><ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0"><Key frame="30" value="-5.2711" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="30" value="86.4879" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="30" value="-6.41851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="30" value="5.88634" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="DubstepMix" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="480" y="29"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="401" size="401"><BehaviorLayer name="LED-eyes"><BehaviorKeyframe name="eyeflash01" index="35"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="86" y="34"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("FaceLeds", 0x0018ff, rDuration)


        time.sleep(0.05)
        self.leds.post.fadeRGB("FaceLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="eyeflash02" index="39"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="86" y="34"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("FaceLeds", 0x0018ff, rDuration)


        time.sleep(0.05)
        self.leds.post.fadeRGB("FaceLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="eyeflash03" index="57"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="86" y="34"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("FaceLeds", 0x0018ff, rDuration)


        time.sleep(0.05)
        self.leds.post.fadeRGB("FaceLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="eyeflash04" index="62"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="86" y="34"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("FaceLeds", 0x0018ff, rDuration)


        time.sleep(0.05)
        self.leds.post.fadeRGB("FaceLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="eyeflash05" index="205"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="86" y="34"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("FaceLeds", 0x0018ff, rDuration)


        time.sleep(0.05)
        self.leds.post.fadeRGB("FaceLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="eyeflash06" index="209"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="86" y="34"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("FaceLeds", 0x0018ff, rDuration)


        time.sleep(0.05)
        self.leds.post.fadeRGB("FaceLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="eyeflash07" index="220"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="86" y="34"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("FaceLeds", 0x0018ff, rDuration)


        time.sleep(0.05)
        self.leds.post.fadeRGB("FaceLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="eyeflash08" index="224"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="86" y="34"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("FaceLeds", 0x0018ff, rDuration)


        time.sleep(0.05)
        self.leds.post.fadeRGB("FaceLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe></BehaviorLayer><BehaviorLayer name="LED-brain"><BehaviorKeyframe name="brainflash01" index="41"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="86" y="34"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x0018ff, rDuration)

        time.sleep(0.05)
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="brainflash02" index="45"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="86" y="34"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("FaceLeds", 0x0018ff, rDuration)


        time.sleep(0.05)
        self.leds.post.fadeRGB("FaceLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="brainflash03" index="208"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="86" y="34"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x0018ff, rDuration)

        time.sleep(0.05)
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="brainflash04" index="212"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="86" y="34"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("FaceLeds", 0x0018ff, rDuration)


        time.sleep(0.05)
        self.leds.post.fadeRGB("FaceLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe></BehaviorLayer><BehaviorLayer name="LED-torso"><BehaviorKeyframe name="torsoflash01" index="44"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="86" y="34"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("ChestLeds", 0x0018ff, rDuration)

        time.sleep(0.05)
        self.leds.post.fadeRGB("ChestLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="torsoflash02" index="48"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="86" y="34"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("ChestLeds", 0x0018ff, rDuration)

        time.sleep(0.05)
        self.leds.post.fadeRGB("ChestLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="torsoflash03" index="211"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="86" y="34"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("ChestLeds", 0x0018ff, rDuration)

        time.sleep(0.05)
        self.leds.post.fadeRGB("ChestLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="torsoflash04" index="215"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="86" y="34"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("ChestLeds", 0x0018ff, rDuration)

        time.sleep(0.05)
        self.leds.post.fadeRGB("ChestLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="torsoflash05" index="224"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="86" y="34"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("ChestLeds", 0x0018ff, rDuration)

        time.sleep(0.05)
        self.leds.post.fadeRGB("ChestLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="torsoflash06" index="232"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="86" y="34"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("ChestLeds", 0x0018ff, rDuration)

        time.sleep(0.05)
        self.leds.post.fadeRGB("ChestLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe></BehaviorLayer><BehaviorLayer name="LED-ears"><BehaviorKeyframe name="earflash01" index="49"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="86" y="34"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("EarLeds", 0x0018ff, rDuration)

        time.sleep(0.05)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="earflash02" index="53"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="86" y="34"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("EarLeds", 0x0018ff, rDuration)

        time.sleep(0.05)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="earflash03" index="214"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="86" y="34"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("EarLeds", 0x0018ff, rDuration)

        time.sleep(0.05)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="earflash04" index="218"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="86" y="34"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("EarLeds", 0x0018ff, rDuration)

        time.sleep(0.05)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="earflash05" index="227"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="86" y="34"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("EarLeds", 0x0018ff, rDuration)

        time.sleep(0.05)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe></BehaviorLayer><BehaviorLayer name="LED-feet"><BehaviorKeyframe name="feetflash01" index="54"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="86" y="34"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        # self.leds.fadeRGB("FeetLeds", 0x0018ff, rDuration)

        time.sleep(0.05)
        # self.leds.fadeRGB("FeetLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="feetflash02" index="58"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="86" y="34"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        # self.leds.fadeRGB("FeetLeds", 0x0018ff, rDuration)

        time.sleep(0.05)
        # self.leds.fadeRGB("FeetLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="feetflash03" index="217"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="86" y="34"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        # self.leds.fadeRGB("FeetLeds", 0x0018ff, rDuration)

        time.sleep(0.05)
        # self.leds.fadeRGB("FeetLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="feetflash04" index="221"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="86" y="34"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        # self.leds.fadeRGB("FeetLeds", 0x0018ff, rDuration)

        time.sleep(0.05)
        # self.leds.fadeRGB("FeetLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe></BehaviorLayer><BehaviorLayer name="LED-ALL"><BehaviorKeyframe name="booom1" index="1"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="122" y="38"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x0018ff, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x0018ff, rDuration)

        time.sleep(0.7)
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x00000, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="miniboom" index="26"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="75" y="39"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x0018ff, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x0018ff, rDuration)

        time.sleep(0.2)
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x00000, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="GANGNAM1" index="67"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="75" y="39"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x06ff00, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x06ff00, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x06ff00, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x06ff00, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x06ff00, rDuration)

        time.sleep(1.0)
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x00000, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="wop1" index="88"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="75" y="39"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x0018ff, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x0018ff, rDuration)

        time.sleep(0.2)
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x00000, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="wop2" index="101"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="75" y="39"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x0018ff, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x0018ff, rDuration)

        time.sleep(0.2)
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x00000, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="Wop3" index="112"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="75" y="39"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x0018ff, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x0018ff, rDuration)

        time.sleep(0.2)
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x00000, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="wop4" index="124"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="75" y="39"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x0018ff, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x0018ff, rDuration)

        time.sleep(0.2)
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x00000, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="OPPA1" index="140"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="75" y="39"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x0018ff, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x0018ff, rDuration)

        time.sleep(0.3)
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x00000, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="GANGNAM2" index="153"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="75" y="39"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x06ff00, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x06ff00, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x06ff00, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x06ff00, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x06ff00, rDuration)

        time.sleep(0.7)
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x00000, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="booom2" index="177"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="75" y="39"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x0018ff, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x0018ff, rDuration)

        time.sleep(0.7)
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x00000, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="GANGNAM3" index="240"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="75" y="39"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x06ff00, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x06ff00, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x06ff00, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x06ff00, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x06ff00, rDuration)

        time.sleep(0.7)
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x00000, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="wop5" index="261"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="75" y="39"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x0018ff, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x0018ff, rDuration)

        time.sleep(0.2)
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x00000, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="wop6" index="273"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="75" y="39"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x0018ff, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x0018ff, rDuration)

        time.sleep(0.2)
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x00000, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="wop7" index="284"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="75" y="39"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x0018ff, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x0018ff, rDuration)

        time.sleep(0.2)
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x00000, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="wop8" index="295"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="75" y="39"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x0018ff, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x0018ff, rDuration)

        time.sleep(0.2)
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x00000, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="OPPA2" index="312"><Diagram><Box name="flash" id="1" localization="8" tooltip="This box makes the robot blink once." x="87" y="19"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x0018ff, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x0018ff, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x0018ff, rDuration)

        time.sleep(0.4)
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x00000, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="OFF" index="326"><Diagram><Box name="EyesOnOff" id="17" localization="8" tooltip="tags:&#x0A;LED" x="346" y="25"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = self.getParameter('Timing')

        self.log(self.getParameter('Eyes'))

        if(self.getParameter('Eyes') == 'On'):
            nColor = 0xFFFFFF
        else:
            nColor = 0x000000

        ALLeds.fadeRGB("AllLeds", nColor, rDuration);

        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Parameter name="Eyes" inherits_from_parent="0" content_type="3" value="Off" default_value="On" custom_choice="0" tooltip="" id="5"><Choice value="On" /><Choice value="Off" /></Parameter><Parameter name="Timing" inherits_from_parent="0" content_type="2" value="1.5" default_value="0.5" min="0.05" max="10.05" tooltip="" id="6" /><Resource name="Left eye leds" type="Lock" timeout="0" /><Resource name="Right eye leds" type="Lock" timeout="0" /></Box><Box name="EyesOnOff" id="1" localization="8" tooltip="tags:&#x0A;LED" x="213" y="26"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = self.getParameter('Timing')

        self.log(self.getParameter('Eyes'))

        if(self.getParameter('Eyes') == 'On'):
            nColor = 0xFFFFFF
        else:
            nColor = 0x000000

        ALLeds.fadeRGB("AllLeds", nColor, rDuration);

        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Parameter name="Eyes" inherits_from_parent="0" content_type="3" value="On" default_value="On" custom_choice="0" tooltip="" id="5"><Choice value="On" /><Choice value="Off" /></Parameter><Parameter name="Timing" inherits_from_parent="0" content_type="2" value="0.05" default_value="0.5" min="0.05" max="10.05" tooltip="" id="6" /><Resource name="Left eye leds" type="Lock" timeout="0" /><Resource name="Right eye leds" type="Lock" timeout="0" /></Box><Box name="flash" id="2" localization="8" tooltip="This box makes the robot blink once." x="81" y="25"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.post.fadeRGB("BrainLeds", 0x06ff00, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x06ff00, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x06ff00, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x06ff00, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x06ff00, rDuration)

        time.sleep(0.5)
        self.leds.post.fadeRGB("BrainLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("EarLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("FaceLeds", 0x00000, rDuration)
        self.leds.post.fadeRGB("ChestLeds", 0x00000, rDuration)
        # self.leds.fadeRGB("FeetLeds", 0x00000, rDuration)
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="17" indexofinput="2" outputowner="1" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe></BehaviorLayer><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="11" value="-29.0695" /><Key frame="15" value="-25.8875" /><Key frame="24" value="25.0388" /><Key frame="33" value="28.5743" /><Key frame="38" value="23.3726" /><Key frame="47" value="-26.4784" /><Key frame="51" value="-30.7211" /><Key frame="54" value="-27.5391" /><Key frame="62" value="14.8873" /><Key frame="65" value="15.3294" /><Key frame="75" value="-30.3675" /><Key frame="85" value="15.3294" /><Key frame="95" value="-22.3404" /><Key frame="104" value="11.1672" /><Key frame="115" value="-17.8808" /><Key frame="124" value="7.89685" /><Key frame="135" value="-17.8808" /><Key frame="144" value="7.89685" /><Key frame="157" value="-21.9837" /><Key frame="177" value="-26.6336" /><Key frame="197" value="10.3" /><Key frame="217" value="-26.6336" /><Key frame="237" value="10.3" /><Key frame="257" value="-26.6336" /><Key frame="277" value="10.3" /><Key frame="297" value="-26.6336" /><Key frame="317" value="10.3" /><Key frame="337" value="-26.6336" /><Key frame="361" value="24.5194" /><Key frame="383" value="29.5" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="16" value="-0.339596" /><Key frame="24" value="-0.353968" /><Key frame="33" value="-5.27591" /><Key frame="47" value="-48.4307" /><Key frame="60" value="-58.011" /><Key frame="110" value="57.303" /><Key frame="141" value="57.303" /><Key frame="177" value="-0.353968" /><Key frame="197" value="0.0854867" /><Key frame="217" value="-0.353968" /><Key frame="237" value="0.0854867" /><Key frame="257" value="-0.353968" /><Key frame="277" value="0.0854867" /><Key frame="297" value="0.353968" /><Key frame="317" value="-0.0854867" /><Key frame="337" value="0.353968" /><Key frame="361" value="0.0854867" /><Key frame="383" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0"><Key frame="16" value="-17.9754" /><Key frame="24" value="-22.5027" /><Key frame="33" value="-24.9637" /><Key frame="47" value="-33.9286" /><Key frame="60" value="-35.5985" /><Key frame="110" value="-18.5476" /><Key frame="141" value="-18.5476" /><Key frame="170" value="-7.64898" /><Key frame="190" value="-18.8991" /><Key frame="210" value="-7.64898" /><Key frame="230" value="-18.8991" /><Key frame="250" value="-7.64898" /><Key frame="270" value="-18.8991" /><Key frame="290" value="-7.64417" /><Key frame="310" value="-18.8943" /><Key frame="330" value="-7.64417" /><Key frame="361" value="-18.0202" /><Key frame="383" value="-18.8943" /></ActuatorCurve><ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0"><Key frame="16" value="-6.67737" /><Key frame="24" value="-6.67737" /><Key frame="33" value="-3.51326" /><Key frame="47" value="16.3503" /><Key frame="60" value="19.778" /><Key frame="85" value="-13.3" /><Key frame="110" value="-22.1463" /><Key frame="141" value="-22.1463" /><Key frame="170" value="-6.67737" /><Key frame="190" value="-6.67737" /><Key frame="210" value="-6.67737" /><Key frame="230" value="-6.67737" /><Key frame="250" value="-6.67737" /><Key frame="270" value="-6.67737" /><Key frame="290" value="-4.13332" /><Key frame="310" value="-4.13332" /><Key frame="330" value="-4.13332" /><Key frame="361" value="-4.12851" /><Key frame="383" value="-4.13332" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="13" value="-82.2" /><Key frame="22" value="-87.362" /><Key frame="29" value="-88.5" /><Key frame="35" value="-80.3256" /><Key frame="44" value="-9.9" /><Key frame="53" value="-69.0445" /><Key frame="60" value="-80.4185" /><Key frame="73" value="-79.3779" /><Key frame="86" value="-64.1" /><Key frame="95" value="-19.5999" /><Key frame="110" value="-14.4997" /><Key frame="141" value="-14.4997" /><Key frame="151" value="-19.9331" /><Key frame="175" value="-44.6466" /><Key frame="195" value="-8.87466" /><Key frame="215" value="-44.6466" /><Key frame="235" value="-8.87466" /><Key frame="255" value="-23.6453" /><Key frame="275" value="-51.6827" /><Key frame="295" value="-23.6453" /><Key frame="315" value="-51.6827" /><Key frame="335" value="-23.6453" /><Key frame="346" value="-78.3" /><Key frame="361" value="-22.7616" /><Key frame="383" value="-23.201" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="13" value="-102.1" /><Key frame="22" value="-92.1129" /><Key frame="29" value="-95.6" /><Key frame="35" value="-92.8028" /><Key frame="44" value="-58.7" /><Key frame="53" value="-43.5823" /><Key frame="60" value="-42.7178" /><Key frame="73" value="-44.1119" /><Key frame="95" value="-116.351" /><Key frame="110" value="-118.393" /><Key frame="141" value="-118.393" /><Key frame="151" value="-117.503" /><Key frame="175" value="-99.966" /><Key frame="195" value="-89.8278" /><Key frame="215" value="-110.219" /><Key frame="235" value="-89.8278" /><Key frame="255" value="-65.9164" /><Key frame="275" value="-60.7308" /><Key frame="295" value="-65.9164" /><Key frame="315" value="-60.7308" /><Key frame="335" value="-65.9164" /><Key frame="361" value="-67.7669" /><Key frame="383" value="-68.4701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="22" value="0" /><Key frame="29" value="0" /><Key frame="35" value="0" /><Key frame="44" value="0" /><Key frame="53" value="0" /><Key frame="60" value="0" /><Key frame="73" value="0" /><Key frame="83" value="0.210224" /><Key frame="94" value="1" /><Key frame="141" value="1" /><Key frame="149" value="0.91472" /><Key frame="174" value="0" /><Key frame="330" value="0" /><Key frame="361" value="0.2788" /><Key frame="383" value="0.298" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0"><Key frame="16" value="-55.1233" /><Key frame="24" value="-66.7074" /><Key frame="33" value="-65.7406" /><Key frame="47" value="-63.6419" /><Key frame="60" value="-61.5218" /><Key frame="110" value="-40.6915" /><Key frame="141" value="-40.6915" /><Key frame="170" value="0.705531" /><Key frame="190" value="-35.2422" /><Key frame="210" value="0.705531" /><Key frame="230" value="-35.2422" /><Key frame="250" value="0.705531" /><Key frame="270" value="-35.2422" /><Key frame="290" value="0.700723" /><Key frame="310" value="-35.3349" /><Key frame="330" value="0.700723" /><Key frame="361" value="-32.6054" /><Key frame="383" value="-35.3349" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0"><Key frame="16" value="6.66781" /><Key frame="24" value="6.68218" /><Key frame="33" value="4.57277" /><Key frame="47" value="-10.8083" /><Key frame="60" value="-14.6755" /><Key frame="110" value="35.4228" /><Key frame="141" value="35.4228" /><Key frame="170" value="6.68218" /><Key frame="190" value="6.68218" /><Key frame="210" value="6.68218" /><Key frame="230" value="6.68218" /><Key frame="250" value="6.68218" /><Key frame="270" value="6.68218" /><Key frame="290" value="3.68905" /><Key frame="310" value="3.68905" /><Key frame="330" value="3.68905" /><Key frame="361" value="3.69386" /><Key frame="383" value="3.68905" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0"><Key frame="16" value="-10.0029" /><Key frame="24" value="-10.0173" /><Key frame="33" value="-9.84147" /><Key frame="47" value="-10.193" /><Key frame="60" value="-10.9841" /><Key frame="110" value="-10.0173" /><Key frame="141" value="-10.0173" /><Key frame="170" value="-10.193" /><Key frame="190" value="-10.1051" /><Key frame="210" value="-10.193" /><Key frame="230" value="-10.1051" /><Key frame="250" value="-10.193" /><Key frame="270" value="-10.1051" /><Key frame="290" value="-10.193" /><Key frame="310" value="-10.1051" /><Key frame="330" value="-10.193" /><Key frame="361" value="-10.193" /><Key frame="383" value="-10.1051" /></ActuatorCurve><ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0"><Key frame="16" value="66.4199" /><Key frame="24" value="80.4185" /><Key frame="47" value="89.0266" /><Key frame="60" value="89.7351" /><Key frame="110" value="57.6546" /><Key frame="141" value="57.6546" /><Key frame="170" value="14.4997" /><Key frame="190" value="57.303" /><Key frame="210" value="14.4997" /><Key frame="230" value="57.303" /><Key frame="250" value="14.4997" /><Key frame="270" value="57.303" /><Key frame="290" value="14.5045" /><Key frame="310" value="57.3078" /><Key frame="330" value="14.5045" /><Key frame="361" value="54.051" /><Key frame="383" value="57.3078" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="13" value="45.3" /><Key frame="22" value="100.282" /><Key frame="29" value="108" /><Key frame="35" value="101.999" /><Key frame="44" value="50.3" /><Key frame="53" value="60.9374" /><Key frame="60" value="62.4886" /><Key frame="73" value="57.19" /><Key frame="86" value="-20.6" /><Key frame="95" value="38.1821" /><Key frame="110" value="50.5353" /><Key frame="141" value="50.5353" /><Key frame="151" value="45.1342" /><Key frame="170" value="-17.405" /><Key frame="190" value="20" /><Key frame="210" value="-17.405" /><Key frame="230" value="20" /><Key frame="250" value="-82.44" /><Key frame="270" value="-36.6484" /><Key frame="290" value="-82.44" /><Key frame="310" value="-36.6484" /><Key frame="330" value="-82.44" /><Key frame="346" value="19" /><Key frame="361" value="70.8383" /><Key frame="383" value="82.3521" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="13" value="11.9" /><Key frame="22" value="6.32579" /><Key frame="29" value="8.3" /><Key frame="35" value="7.61655" /><Key frame="44" value="-1.8" /><Key frame="53" value="-10.0474" /><Key frame="60" value="-11.4283" /><Key frame="73" value="-7.6513" /><Key frame="86" value="47.8" /><Key frame="95" value="63.5052" /><Key frame="110" value="67.2348" /><Key frame="141" value="67.2348" /><Key frame="151" value="53.8097" /><Key frame="170" value="-4.56497" /><Key frame="190" value="-18" /><Key frame="210" value="-18" /><Key frame="230" value="-18" /><Key frame="250" value="22.5906" /><Key frame="270" value="30.1493" /><Key frame="290" value="22.5906" /><Key frame="310" value="30.1493" /><Key frame="330" value="22.5906" /><Key frame="346" value="18.7" /><Key frame="361" value="16.9607" /><Key frame="383" value="17.8396" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="22" value="4.91954" /><Key frame="29" value="3.1" /><Key frame="35" value="3.01222" /><Key frame="53" value="2.8135" /><Key frame="60" value="2.45857" /><Key frame="73" value="3.06993" /><Key frame="95" value="45.25" /><Key frame="110" value="53.4358" /><Key frame="141" value="53.4358" /><Key frame="151" value="59.5266" /><Key frame="170" value="81.8248" /><Key frame="190" value="82.5279" /><Key frame="210" value="81.8248" /><Key frame="230" value="82.5279" /><Key frame="250" value="-12.2146" /><Key frame="270" value="-13.1813" /><Key frame="290" value="-12.2146" /><Key frame="310" value="-13.1813" /><Key frame="330" value="-12.2146" /><Key frame="361" value="4.65585" /><Key frame="383" value="5.44688" /></ActuatorCurve><ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0"><Key frame="16" value="-18.1497" /><Key frame="24" value="-22.8494" /><Key frame="33" value="-21.7068" /><Key frame="47" value="-18.7934" /><Key frame="60" value="-18.8064" /><Key frame="110" value="-35.0664" /><Key frame="141" value="-35.0664" /><Key frame="170" value="-7.64417" /><Key frame="190" value="-18.8943" /><Key frame="210" value="-7.64417" /><Key frame="230" value="-18.8943" /><Key frame="250" value="-7.64417" /><Key frame="270" value="-18.8943" /><Key frame="290" value="-7.64898" /><Key frame="310" value="-18.8991" /><Key frame="330" value="-7.64898" /><Key frame="361" value="-18.0154" /><Key frame="383" value="-18.8991" /></ActuatorCurve><ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0"><Key frame="16" value="4.22121" /><Key frame="24" value="4.22121" /><Key frame="33" value="5.89115" /><Key frame="47" value="19.0749" /><Key frame="60" value="22.3269" /><Key frame="85" value="13.3" /><Key frame="110" value="-6.15001" /><Key frame="141" value="-6.15001" /><Key frame="170" value="4.13332" /><Key frame="190" value="4.13332" /><Key frame="210" value="4.13332" /><Key frame="230" value="4.13332" /><Key frame="250" value="4.13332" /><Key frame="270" value="4.13332" /><Key frame="290" value="6.67737" /><Key frame="310" value="6.67737" /><Key frame="330" value="6.67737" /><Key frame="361" value="6.68218" /><Key frame="383" value="6.67737" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="13" value="88.5" /><Key frame="22" value="86.9273" /><Key frame="29" value="88.5" /><Key frame="35" value="88.0216" /><Key frame="44" value="71.2" /><Key frame="53" value="22.4618" /><Key frame="60" value="15.1198" /><Key frame="73" value="15.3354" /><Key frame="86" value="18.5" /><Key frame="95" value="69.5235" /><Key frame="110" value="79.7202" /><Key frame="141" value="79.7202" /><Key frame="151" value="76.9547" /><Key frame="175" value="23.6453" /><Key frame="195" value="51.6827" /><Key frame="215" value="23.6453" /><Key frame="235" value="51.6827" /><Key frame="255" value="44.6466" /><Key frame="275" value="8.87466" /><Key frame="295" value="44.6466" /><Key frame="315" value="8.87466" /><Key frame="335" value="44.6466" /><Key frame="346" value="76.7" /><Key frame="361" value="25.0515" /><Key frame="383" value="23.6453" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="13" value="119.5" /><Key frame="22" value="92.0202" /><Key frame="29" value="95.6" /><Key frame="35" value="88.1432" /><Key frame="44" value="23.9" /><Key frame="53" value="104.913" /><Key frame="60" value="119.5" /><Key frame="73" value="118.106" /><Key frame="95" value="45.8672" /><Key frame="110" value="43.3282" /><Key frame="141" value="43.3282" /><Key frame="151" value="47.0178" /><Key frame="175" value="65.9164" /><Key frame="195" value="60.7308" /><Key frame="215" value="65.9164" /><Key frame="235" value="60.7308" /><Key frame="255" value="110.219" /><Key frame="275" value="89.8278" /><Key frame="295" value="110.219" /><Key frame="315" value="89.8278" /><Key frame="335" value="110.219" /><Key frame="361" value="70.8383" /><Key frame="383" value="67.4106" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="22" value="0" /><Key frame="29" value="0" /><Key frame="35" value="0" /><Key frame="45" value="0.316671" /><Key frame="52" value="1" /><Key frame="70" value="1" /><Key frame="83" value="0" /><Key frame="95" value="0" /><Key frame="110" value="0.2876" /><Key frame="141" value="0.2876" /><Key frame="151" value="0.236464" /><Key frame="170" value="0" /><Key frame="330" value="0" /><Key frame="361" value="0.284" /><Key frame="383" value="0.3052" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0"><Key frame="16" value="-55.2304" /><Key frame="24" value="-66.8001" /><Key frame="33" value="-64.3392" /><Key frame="47" value="-49.2194" /><Key frame="60" value="-45.9698" /><Key frame="110" value="-55.7258" /><Key frame="141" value="-55.7258" /><Key frame="170" value="0.700723" /><Key frame="190" value="-35.3349" /><Key frame="210" value="0.700723" /><Key frame="230" value="-35.3349" /><Key frame="250" value="0.700723" /><Key frame="270" value="-35.3349" /><Key frame="290" value="0.705531" /><Key frame="310" value="-35.2422" /><Key frame="330" value="0.705531" /><Key frame="361" value="-32.5223" /><Key frame="383" value="-35.2422" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0"><Key frame="16" value="-3.68905" /><Key frame="24" value="-3.68905" /><Key frame="33" value="-6.32579" /><Key frame="47" value="-29.9687" /><Key frame="60" value="-35.6816" /><Key frame="110" value="3.69386" /><Key frame="141" value="3.69386" /><Key frame="170" value="-3.68905" /><Key frame="190" value="-3.68905" /><Key frame="210" value="-3.68905" /><Key frame="230" value="-3.68905" /><Key frame="250" value="-3.68905" /><Key frame="270" value="-3.68905" /><Key frame="290" value="-6.68218" /><Key frame="310" value="-6.68218" /><Key frame="330" value="-6.68218" /><Key frame="361" value="-6.67737" /><Key frame="383" value="-6.68218" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0"><Key frame="16" value="-10.0029" /><Key frame="24" value="-10.0173" /><Key frame="33" value="-9.84147" /><Key frame="47" value="-10.193" /><Key frame="60" value="-10.9841" /><Key frame="110" value="-10.0173" /><Key frame="141" value="-10.0173" /><Key frame="170" value="-10.193" /><Key frame="190" value="-10.1051" /><Key frame="210" value="-10.193" /><Key frame="230" value="-10.1051" /><Key frame="250" value="-10.193" /><Key frame="270" value="-10.1051" /><Key frame="290" value="-10.193" /><Key frame="310" value="-10.1051" /><Key frame="330" value="-10.193" /><Key frame="361" value="-10.193" /><Key frame="383" value="-10.1051" /></ActuatorCurve><ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0"><Key frame="16" value="66.4103" /><Key frame="24" value="80.4233" /><Key frame="33" value="78.5776" /><Key frame="47" value="57.8305" /><Key frame="60" value="52.4738" /><Key frame="110" value="91.234" /><Key frame="141" value="91.234" /><Key frame="170" value="14.5045" /><Key frame="190" value="57.3078" /><Key frame="210" value="14.5045" /><Key frame="230" value="57.3078" /><Key frame="250" value="14.5045" /><Key frame="270" value="57.3078" /><Key frame="290" value="14.4997" /><Key frame="310" value="57.303" /><Key frame="330" value="14.4997" /><Key frame="361" value="53.9679" /><Key frame="383" value="57.303" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="13" value="40.4" /><Key frame="22" value="101.517" /><Key frame="29" value="108" /><Key frame="35" value="90.164" /><Key frame="44" value="-41.8825" /><Key frame="53" value="31.3662" /><Key frame="60" value="48.5186" /><Key frame="73" value="45.9337" /><Key frame="86" value="45.3" /><Key frame="95" value="58.6544" /><Key frame="110" value="63.1965" /><Key frame="141" value="63.1965" /><Key frame="151" value="42.2175" /><Key frame="170" value="-82.44" /><Key frame="190" value="-36.6484" /><Key frame="210" value="-82.44" /><Key frame="230" value="-36.6484" /><Key frame="250" value="-17.405" /><Key frame="270" value="20" /><Key frame="290" value="-17.405" /><Key frame="310" value="20" /><Key frame="330" value="-17.405" /><Key frame="346" value="40.4" /><Key frame="361" value="76.2924" /><Key frame="383" value="82.8843" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="13" value="-10.2" /><Key frame="22" value="-3.1665" /><Key frame="29" value="-8.3" /><Key frame="35" value="-16.3753" /><Key frame="44" value="-59.8" /><Key frame="53" value="-70.0234" /><Key frame="60" value="-71.0189" /><Key frame="73" value="-64.1737" /><Key frame="86" value="-6.8" /><Key frame="95" value="10.649" /><Key frame="110" value="9.5778" /><Key frame="141" value="9.5778" /><Key frame="151" value="5.20656" /><Key frame="170" value="-22.5906" /><Key frame="190" value="-30.1493" /><Key frame="210" value="-22.5906" /><Key frame="230" value="-30.1493" /><Key frame="250" value="18" /><Key frame="270" value="18" /><Key frame="290" value="18" /><Key frame="310" value="18" /><Key frame="330" value="18" /><Key frame="361" value="-14.8561" /><Key frame="383" value="-18.5476" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="22" value="-4.74855" /><Key frame="29" value="-3.1" /><Key frame="35" value="-4.75499" /><Key frame="53" value="-50.2019" /><Key frame="60" value="-52.8253" /><Key frame="73" value="-52.1759" /><Key frame="95" value="-9.42262" /><Key frame="110" value="-0.793436" /><Key frame="141" value="-0.793436" /><Key frame="151" value="2.67737" /><Key frame="170" value="10.7146" /><Key frame="190" value="13.1813" /><Key frame="210" value="12.2146" /><Key frame="230" value="13.1813" /><Key frame="250" value="-81.8248" /><Key frame="270" value="-82.5279" /><Key frame="290" value="-81.8248" /><Key frame="310" value="-82.5279" /><Key frame="330" value="-81.8248" /><Key frame="361" value="-0.969218" /><Key frame="383" value="4.39218" /></ActuatorCurve></ActuatorList></Timeline></Box><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="4" /><Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" /><Link inputowner="0" indexofinput="5" outputowner="6" indexofoutput="4" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="End" index="24"><Diagram><Box name="Goto Posture" id="7" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="130" y="37"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="4" /><Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="5" /><Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6"><Choice value="Crouch" /><Choice value="LyingBack" /><Choice value="LyingBelly" /><Choice value="Sit" /><Choice value="SitRelax" /><Choice value="StandInit" /><Choice value="Stand" /><Choice value="StandZero" /></Parameter><Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" /><Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" /><Resource name="All motors" type="Lock" timeout="0" /><Resource name="Stiffness" type="Lock" timeout="0" /></Box><Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="1" /><Link inputowner="0" indexofinput="5" outputowner="7" indexofoutput="4" /><Link inputowner="0" indexofinput="5" outputowner="7" indexofoutput="5" /></Diagram></BehaviorKeyframe></BehaviorLayer><BehaviorLayer name="watchdog"><BehaviorKeyframe name="Watch" index="1"><Diagram><Box name="Popup" id="8" localization="8" tooltip="Play the sound, but NOW!&#x0A;v0.6&#x0A;&#x0A;- use preloading of sound, but sadly, it&apos;s notloaded at init but at onload (so at the loading of a timeline, argghhhh)" x="351" y="167"><bitmap>media/images/box/interaction/play_music.png</bitmap><script language="4"><content><![CDATA[# PlaySoundWithPreloading
# v0.6
import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.player = ALProxy('ALAudioPlayer')
        self.playerStop = ALProxy('ALAudioPlayer', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        self.loadedSoundID = self.player.loadFile(ALFrameManager.getBehaviorPath(self.behaviorId) + self.getParameter("Sound File"));


    def onUnload(self):
        try:
            self.player.unloadFile(self.loadedSoundID)
        except:
            #self.log("Could not unload the sound")
            pass
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while(self.bIsRunning):
            time.sleep(0.2)

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            id = self.player.post.play(self.loadedSoundID,self.getParameter("Volume (%)")/100.,self.getParameter("Panorama"))
            self.ids.append(id)
            self.player.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if(self.ids == []):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()
# PlaySoundWithPreloading - end
pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="5" /><Parameter name="Panorama" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on NAO&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="6" /><Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="7" /><Parameter name="Sound File" inherits_from_parent="0" content_type="4" value="/sounds/popup.ogg" default_value="" tooltip="select your sound file from project ressource" id="8" /></Box><Box name="GotoEnd" id="2" localization="8" tooltip="Jump to the frame name set in parameters and stop the parent timeline.&#x0A;&#x0A;!!Warning!! This box does not stop the behavior! It is only the timeline which will&#x0A;stop playing, the keyframes and boxes will still be running." x="539" y="80"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onInput_onGo(self):
        self.gotoAndStopParent(self.getParameter("Frame name"))]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onGo" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" /><Parameter name="Frame name" inherits_from_parent="0" content_type="3" value="End" default_value="" custom_choice="0" tooltip="Name of the frame you want to go to." id="3" /></Box><Box name="BA / Breathing" id="3" localization="8" tooltip="Disable Basic Awareness and Breathing." x="132" y="420"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        self.ba = ALProxy("ALBasicAwareness")

    def onUnload(self):
        pass

    def onInput_onStart(self):
        try:
            self.motion.setBreathEnabled("Body", False)
        except Exception as exc:
            self.log("Unable to disable breathing: %s" % str(exc))

        try:
            self.ba.stopAwareness()
        except Exception as exc:
            self.log("Unable to stop awareness: %s" % str(exc))

        self.onStopped()

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="TactileCodes" id="18" localization="8" tooltip="Detection de sequence tactile sur la tÃªte de Nao." x="145" y="15"><bitmap>media/images/box/icons_appu/fingerprint.png</bitmap><script language="4"><content><![CDATA[class SequenceHandler():
    def __init__(self, aSeq):
        self.aTactilSequence = aSeq
        self.reset()

    def reset(self):
        self.nTapTime = None
        self.nTapIndex = 2

    def update(self, aState, nTime):
        # In any case, if too much time elasped, sequence is invalidated
        if self.nTapTime != None and (nTime - self.nTapTime) > self.aTactilSequence[self.nTapIndex-1]:
            self.reset()
        # If current sensors state match current expected shape
        if aState == self.aTactilSequence[self.nTapIndex]:
            self.nTapTime = nTime
            self.nTapIndex += 2
        # If current sensor state does not match sequence at current index BUT match sequence at first index
        elif aState == self.aTactilSequence[1]:
            self.nTapTime = nTime
            self.nTapIndex = 4
        # If we've reach the end of the sequence, then output !!
        if self.nTapIndex > len(self.aTactilSequence):
            return self.aTactilSequence[0]
        else:
            return None

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bIsRunning = False
        # Build a list of devices with full name
        self.aDeviceNames = ["%sTactilTouched" % name for name in ["Front", "Middle", "Rear"]]

        # Parameters
        self.parameters = [   ["CaressFtoR", "Caress front to rear", [1, 0, 0], 0.5, [1, 1, 0], 0.5, [0, 1, 0], 0.5, [0, 1, 1], 0.5, [0, 0, 1]],
                                ["CaressRtoF", "Caress rear to front", [0, 0, 1], 0.5, [0, 1, 1], 0.5, [0, 1, 0], 0.5, [1, 1, 0], 0.5, [1, 0, 0]],
                                ["SingleTap", "Single tap", [1, 1, 1], 1.5, [0, 0, 0]],
                                ["EnumerateFtoR", "Enumerate front to rear", [1, 0, 0], 1.0, [0, 1, 0], 1.0, [0, 0, 1]],
                                ["EnumerateRtoF", "Enumerate rear to front", [0, 0, 1], 1.0, [0, 1, 0], 1.0, [1, 0, 0]],
                                ["ZoomIn", "Zoom in", [1, 0, 1], 1.0, [0, 1, 0]],
                                ["ZoomOut", "Zoom out", [0, 1, 0], 1.0, [1, 0, 1]],
                                ["DoubleFront", "Double front", [1, 0, 0], 1.0, [0, 0, 0], 1.0, [1, 0, 0]],
                                ["DoubleMiddle", "Double middle", [0, 1, 0], 1.0, [0, 0, 0], 1.0, [0, 1, 0]],
                                ["DoubleRear", "Double rear", [0, 0, 1], 1.0, [0, 0, 0], 1.0, [0, 0, 1]],
                                ["DoubleTap", "Double tap", [1, 1, 1], 1.0, [0, 0, 0], 1.0, [1, 1, 1]],
                                ["SecretCode", "Secret code", [1, 0, 1], 1.0, [0, 0, 0], 1.0, [1, 0, 1]],
                                ["CalmDown", "Calm down", [1, 1, 1], 8.0, [0, 0, 0]]    ]
        # Create a sequence handler object for each enable sequence


    def onLoad(self):
        self.aSequenceHandler = []
        for seq in self.parameters:
            if self.getParameter(seq[1]):
                self.aSequenceHandler.append(SequenceHandler(seq))
        self.memory = ALProxy("ALMemory")
        self.bIsRunning = False
        self.onInput_reset()

    def onUnload(self):
        self.onInput_onStop()

    def onSensorChange(self, pDataName, pValue, pMessage):
        "This is called whenever one of the three tactil sensors state change"
        aState = self.memory.getListData(self.aDeviceNames)
        # This prevent to process several times the same sensor state
        if aState != self.aState:
            self.aState = aState
            nTime = time.time()
            #~ self.log(str(aState))
            for seq in self.aSequenceHandler:
                sOutput = seq.update(aState, nTime)
                if  sOutput != None:
                    self.Match(sOutput)
                    # Force all other sequence to be reset to prevent multiple match.
                    # But this will prevent sequences like "DoubleTap" to work since each "SingleTap" will reset "DoubleTap"
                    self.onInput_reset()
                    # Get the output function from the sequence name
                    try:
                        func = getattr(self, sOutput)
                        func()
                    # If no output function found, just forget it
                    except:
                        pass

    def onInput_onStart(self):
        if not self.bIsRunning:
            self.bIsRunning = True
            # Save initial sensor state
            self.aState = None
            # Subscribe to each sensor device
            for device in self.aDeviceNames:
                self.memory.subscribeToEvent(device, self.getName(), "onSensorChange")

    def onInput_onStop(self):
        if self.bIsRunning:
            for device in self.aDeviceNames:
                self.memory.unsubscribeToEvent(device, self.getName())
            self.onInput_reset()
            self.bIsRunning = False

    def onInput_reset(self):
        for seq in self.aSequenceHandler:
            seq.reset()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="Match" type="3" type_size="1" nature="2" inner="0" tooltip="double tap" id="4" /><Output name="SingleTap" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" /><Output name="DoubleFront" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Output name="DoubleMiddle" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" /><Output name="DoubleRear" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" /><Output name="EnumerateRtoF" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" /><Output name="EnumerateFtoR" type="1" type_size="1" nature="2" inner="0" tooltip="" id="10" /><Output name="CaressRtoF" type="1" type_size="1" nature="2" inner="0" tooltip="" id="11" /><Output name="CaressFtoR" type="1" type_size="1" nature="2" inner="0" tooltip="" id="12" /><Output name="DoubleTap" type="1" type_size="1" nature="2" inner="0" tooltip="" id="13" /><Output name="ZoomOut" type="1" type_size="1" nature="2" inner="0" tooltip="" id="14" /><Output name="ZoomIn" type="1" type_size="1" nature="2" inner="0" tooltip="" id="15" /><Output name="CalmDown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="16" /><Output name="SecretCode" type="1" type_size="1" nature="2" inner="0" tooltip="" id="17" /><Parameter name="Caress front to rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Caress front to rear" id="18" /><Parameter name="Caress rear to front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="19" /><Parameter name="Single tap" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="20" /><Parameter name="Double front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="21" /><Parameter name="Double middle" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="22" /><Parameter name="Double rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="23" /><Parameter name="Calm down" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="24" /><Parameter name="Enumerate front to rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="25" /><Parameter name="Enumerate rear to front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="26" /><Parameter name="Zoom in" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="27" /><Parameter name="Zoom out" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="28" /><Parameter name="Double tap" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="29" /><Parameter name="Secret code" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="30" /></Box><Box name="AntiCollision / SmartStiffness / Safeguard" id="1" localization="8" tooltip="Activate the anti-collision and smart stiffness. And reactivates it on unload." x="160" y="305"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        self.alife = ALProxy("ALAutonomousLife")
        self.restore_smart_stiffness_on_unload = False
        self.restore_anti_collision_on_unload = False
        self.restore_fall_safeguard_on_unload = False

    def onUnload(self):
        if self.restore_smart_stiffness_on_unload:
            self.motion.setSmartStiffnessEnabled(True)

        if self.restore_anti_collision_on_unload:
            self.motion.setCollisionProtectionEnabled("Arms", True)

        if self.restore_fall_safeguard_on_unload:
            self.alife.setSafeguardEnabled("RobotFell", True)

    def onInput_onStart(self):
        if self.motion.getSmartStiffnessEnabled():
            self.motion.setSmartStiffnessEnabled(False)
            self.restore_smart_stiffness_on_unload = True

        if self.motion.getCollisionProtectionEnabled("Arms"):
            self.motion.setCollisionProtectionEnabled("Arms", False)
            self.restore_anti_collision_on_unload = True

        if self.alife.isSafeguardEnabled("RobotFell"):
            self.alife.setSafeguardEnabled("RobotFell", False)
            self.restore_fall_safeguard_on_unload = True

        self.onStopped()

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="2" indexofinput="2" outputowner="8" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="1" /><Link inputowner="18" indexofinput="2" outputowner="0" indexofoutput="1" /><Link inputowner="8" indexofinput="2" outputowner="18" indexofoutput="5" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="Deactivated" index="24"><Diagram /></BehaviorKeyframe></BehaviorLayer></Timeline><Resource name="All motors" type="Lock" timeout="2" /><Resource name="Audio" type="Lock" timeout="2" /></Box><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="5" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>