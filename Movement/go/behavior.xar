<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Go" id="1" localization="8" tooltip="This box contains a Python script that makes the robot move towards the requested direction. To stop the movement and exit the behavior, touch the robot&apos;s head, hand or bumpers." x="206" y="65"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import qi
import sys
from naoqi import ALProxy
import functools

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy("ALMemory")
        self.memory.subscribeToEvent("TouchChanged", self.getName(), "onTouched")
        self.motionProxy = ALProxy("ALMotion")
        # For NAO robot
        self.motionProxy.setMotionConfig([["ENABLE_FOOT_CONTACT_PROTECTION", True]])
        self.isRunning = True

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    # Every time a robot sensor is touched, the movement is stopped and the behavior will stop.
    def onTouched(self, strVarName, value):
        self.logger.info("touched")
        self.motionProxy.stopMove()
        self.isRunning = False

    def onInput_onStart(self):
        where = str(self.memory.getData("CAIR/go"))
        if where == "forward" or where == "avanti":
            X = 0.5
            Y = 0.0
        elif where == "back" or where == "indietro":
            X = -0.5
            Y = 0.0
        elif where == "right" or where == "destra ":
            X = 0.0
            Y = -0.5
        elif where == "left" or where == "sinistra":
            X = 0.0
            Y = 0.5
        else:
            self.onStopped()

        Theta = 0.0
        self.motionProxy.moveToward(X, Y, Theta)

        while self.isRunning and self.motionProxy.moveIsActive():
            pass

        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>