<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Play Song" id="1" localization="8" tooltip="This box contains a Python script to play music. It  retrieves eventual missing parameters, and calls the play-music behavior to reproduce the requested song." x="202" y="88"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import sys
import qi
import urllib2
import re
import time
import base64
from naoqi import ALProxy


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motionProxy = ALProxy("ALMotion")
        self.memory = ALProxy("ALMemory")
        self.al = ALProxy("ALAutonomousLife")
        self.animated_speech = ALProxy("ALAnimatedSpeech")
        try:
            self.voice_speed = "\\RSPD=" + str(self.memory.getData("CAIR/voice_speed")) + "\\"
        except:
            self.voice_speed = "\\RSPD=80\\"
        try:
            self.language = self.memory.getData("CAIR/language")
        except:
            self.language = "en"
        self.configuration = {"bodyLanguageMode": "contextual"}

        self.audio_player_service = ALProxy("ALAudioPlayer")
        self.server_ip = self.memory.getData("CAIR/server_ip")
        self.music_port = self.memory.getData("CAIR/music_port")
        self.app_path = "/data/home/nao/.local/share/PackageManager/apps/musicplayer"
        self.request_uri = "http://" + self.server_ip + ":" + self.music_port + "/CAIR_music/"
        self.logger.info(self.request_uri)

    def setAutonomousAbilities(self, blinking, background, awareness, listening, speaking):
        self.al.setAutonomousAbilityEnabled("AutonomousBlinking", blinking)
        self.al.setAutonomousAbilityEnabled("BackgroundMovement", background)
        self.al.setAutonomousAbilityEnabled("BasicAwareness", awareness)
        self.al.setAutonomousAbilityEnabled("ListeningMovement", listening)
        self.al.setAutonomousAbilityEnabled("SpeakingMovement", speaking)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if self.server_ip == "":
            if self.language == "it":
                to_say = "Mi dispiace, non riesco a contattare il server per scaricare la canzone."
            else:
                to_say = "I'm sorry, I cannot reach the server to download the song."
            self.animated_speech.say(self.voice_speed + to_say, self.configuration)
            self.onInput_onStop()
            sys.exit(0)

        text = self.memory.getData("CAIR/song_title")
        self.logger.info("Looking for the song: " + str(text))

        if self.language == "it":
            wait_str = "Dammi un momento. Sto cercando la canzone che mi hai chiesto. Per favore, sii paziente, potrebbe volerci qualche minuto."
            start_str = "Ecco la canzone che mi hai chiesto!"
        else:
            wait_str = "Give me a moment. I'm looking for the song. Please, be patient, it may take a while."
            start_str = "Here is the song you asked fror!"
        self.animated_speech.say(self.voice_speed + wait_str, self.configuration)
        text = text.replace(" ", "+")

        try:
            response = requests.put(self.request_uri + str(text), verify=False)
            encoded_string = response.json()['mp3']
            wav_file = open(self.app_path + '/song.mp3', 'wb')
            decoded_string = base64.b64decode(encoded_string)
            wav_file.write(decoded_string)

            self.animated_speech.say(self.voice_speed + start_str, self.configuration)

            fileId = self.audio_player_service.loadFile(self.app_path + "/song.mp3")
            self.logger.info(fileId)
            self.audio_player_service.play(fileId)
            file_length = self.audio_player_service.getFileLength(fileId)
            self.logger.info(file_length)
            currentPos = self.audio_player_service.getCurrentPosition(fileId)

            while abs(currentPos - file_length) > 1e-09:
                currentPos = self.audio_player_service.getCurrentPosition(fileId)
        except:
            self.animated_speech.say(self.voice_speed + "Mi dispiace, in questo momento non riesco a riprodurre la canzone che mi hai chiesto.", self.configuration)

        self.memory.removeData("CAIR/song_title")
        self.onInput_onStop()


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>