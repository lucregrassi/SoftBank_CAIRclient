<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Volume" id="1" localization="8" tooltip="This box contains a Python script that sets the robot&apos;s volume on the basis of the user request." x="172" y="62"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy("ALMemory")
        self.audio_device = ALProxy("ALAudioDevice")
        self.animated_speech = ALProxy("ALAnimatedSpeech")
        self.language = self.memory.getData("CAIR/language")
        try:
            self.voice_speed = "\\RSPD=" + str(self.memory.getData("CAIR/voice_speed")) + "\\"
        except:
            self.voice_speed = "\\RSPD=80\\"
        self.configuration = {"bodyLanguageMode": "contextual"}
        self.higher_volume = ["raise", "higher", "louder", "forte", "alza"]
        self.lower_volume = ["lower", "quieter", "abbassa", "piano"]

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        max_volume = 90
        normal_volume = 50
        min_volume = 30

        level = self.memory.getData("CAIR/volume_level").lower()
        previous_volume = self.audio_device.getOutputVolume()
        self.logger.info("Previous volume: " + str(previous_volume))

        if level in self.higher_volume:
            if previous_volume == max_volume:
                if self.language == "it":
                    to_say = "Il mio volume è già al massimo."

                else:
                    to_say = "I can't speak louder than this."
                self.animated_speech.say(self.voice_speed + to_say, self.configuration)
            else:
                new_volume = previous_volume + 10
                if new_volume > max_volume:
                    new_volume = max_volume
                    self.logger.info(str(new_volume))
                self.audio_device.setOutputVolume(new_volume)
                if self.language == "it":
                    to_say = "Ora parlo più forte."
                else:
                    to_say = "I raised my volume."
                self.animated_speech.say(self.voice_speed + to_say, self.configuration)
        elif level in self.lower_volume:
            if previous_volume == min_volume:
                if self.language == "it":
                    to_say = "Mi dispiace, non posso parlare più piano di così."
                else:
                    to_say = "I'm sorry, I can't speak lower than this."
                self.animated_speech.say(self.voice_speed + to_say, self.configuration)
            else:
                new_volume = previous_volume - 10
                if new_volume < min_volume:
                    new_volume = min_volume
                    self.logger.info(str(new_volume))
                self.audio_device.setOutputVolume(new_volume)
                if self.language == "it":
                    to_say = "Ho abbassato il volume."
                else:
                    to_say = "I lowered my volume."
                self.animated_speech.say(self.voice_speed + to_say, self.configuration)
        elif level == "high" or level == "alto":
            if previous_volume == max_volume:
                if self.language == "it":
                    to_say = "Il mio volume è già al massimo."
                else:
                    to_say = "My volume is already set to high."
                self.animated_speech.say(self.voice_speed + to_say, self.configuration)
            else:
                new_volume = max_volume
                self.logger.info(str(new_volume))
                self.audio_device.setOutputVolume(new_volume)
                if self.language == "it":
                    to_say = "Ora il mio volume è al massimo."
                else:
                    to_say = "Now my volume is now set to high."
                self.animated_speech.say(self.voice_speed + to_say, self.configuration)
        elif level == "normal" or level == "normale":
            if previous_volume == normal_volume:
                self.animated_speech.say(self.voice_speed + "My volume is already set to normal.", self.configuration)
            else:
                new_volume = normal_volume
                self.logger.info(str(new_volume))
                self.audio_device.setOutputVolume(new_volume)
                if self.language == "it":
                    to_say = "Ora il mio volume è normale."
                else:
                    to_say = "Now my volume is now set to normal."
                self.animated_speech.say(self.voice_speed + to_say, self.configuration)
        elif level == "low" or level == "basso":
            if previous_volume == min_volume:
                if self.language == "it":
                    to_say = "Il mio volume è già al minimo."
                else:
                    to_say = "My volume is already set to low."
                self.animated_speech.say(self.voice_speed + "My volume is already set to low.", self.configuration)
            else:
                new_volume = min_volume
                self.logger.info(str(new_volume))
                self.audio_device.setOutputVolume(new_volume)
                if self.language == "it":
                    to_say = "Ora il mio volume è al minimo."
                else:
                    to_say = "Now my volume is now set to low."
                self.animated_speech.say(self.voice_speed + to_say, self.configuration)
        else:
            if self.language == "it":
                to_say = "Mi dispiace, non posso impostare il volume a " + str(level) + ". "
            else:
                to_say = "I'm sorry, I can't set my volume to " + str(level) + " ."
            self.animated_speech.say(self.voice_speed  + to_say, self.configuration)

        self.onInput_onStop()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>