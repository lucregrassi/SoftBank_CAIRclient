<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Waiting chit-chatting" id="1" localization="8" tooltip="This box contains a basic python script that allows the robot to interact with the CAIR Cloud. This version waits for the user to say a specific sentence before going on with the dialogue." x="227" y="42"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import qi
import sys
sys.path.append("/data/home/nao/.local/share/PackageManager/apps/dialoguemanager/libs/")
from naoqi import ALProxy
import requests
import argparse
import time
import os
import re
import time
import threading
import json
from numpy.random import choice


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.isAlive = True
        self.sASR = ALProxy("ASR2")
        self.memory = ALProxy("ALMemory")
        self.speech_reco_event = "Audio/RecognizedWords"
        self.al = ALProxy("ALAutonomousLife")
        self.motion = ALProxy("ALMotion")
        self.tts = ALProxy("ALTextToSpeech")
        self.animated_speech = ALProxy("ALAnimatedSpeech")
        self.configuration = {"bodyLanguageMode": "contextual"}
        self.setAutonomousAbilities(True, True, True, True, True)
        self.behavior_manager = ALProxy("ALBehaviorManager")
        self.audio_device = ALProxy("ALAudioDevice")
        self.tablet = True
        try:
            self.tablet_service = ALProxy("ALTabletService")
        except:
            self.tablet = False

        try:
            self.voice_speed = "\\RSPD=" + str(self.memory.getData("CAIR/voice_speed")) + "\\"
        except:
            self.memory.insertData("CAIR/voice_speed", 80)
            self.voice_speed = "\\RSPD=80\\"

        self.audio_device = ALProxy("ALAudioDevice")
        self.audio_device.setOutputVolume(60)

        self.asr_service = ALProxy("ALSpeechRecognition")
        self.asr_service.setAudioExpression(False)
        self.dialogue_state_file_path = "/data/home/nao/.local/share/PackageManager/apps/dialoguemanager/dialogue_state.json"

    def setAutonomousAbilities(self, blinking, background, awareness, listening, speaking):
        self.al.setAutonomousAbilityEnabled("AutonomousBlinking", blinking)
        self.al.setAutonomousAbilityEnabled("BackgroundMovement", background)
        self.al.setAutonomousAbilityEnabled("BasicAwareness", awareness)
        self.al.setAutonomousAbilityEnabled("ListeningMovement", listening)
        self.al.setAutonomousAbilityEnabled("SpeakingMovement", speaking)

    # This thread function allows the robot to talk while it is performing the action for the corresponding greeting
    def thread_function(self, greeting):
        self.logger.info(greeting)
        if greeting == 1:
            time.sleep(2.5)
            self.tts.say("Hello")
        elif greeting == 2:
            time.sleep(3)
            self.tts.say("Namastay")
        elif greeting == 3:
            time.sleep(3)
            self.tts.say("Konnichiwa")
        self.tts.setLanguage("English")

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        # Location of the API (the server it is running on)
        server_IP = "131.175.198.134"
        BASE = "http://" + server_IP + ":5000/CAIR_hub"
        self.previous_sentence = ""
        self.not_installed_behavior = "I'm sorry, I can't perform this task because the behavior is not installed."
        self.repeat = False

        try:
            if self.al.getState() != "disabled":
                self.animated_speech.say(self.voice_speed + "Give me a moment. I need to change some of my settings before we start.", self.configuration)
                self.al.setState("disabled")
        except:
            pass

        self.motion.wakeUp()

        # With Pepper robot, preload the images to be set on the tablet during the conversation
        if self.tablet:
            self.tablet_service.preLoadImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/DialogueMode.png")
            self.tablet_service.preLoadImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/ExecutionMode.png")
            self.tablet_service.preLoadImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/PrivacyMode.png")
            self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/DialogueMode.png")


        # If the file with the credentials exists, read the ID and use it during the requests to the Cloud
        if not os.path.exists(self.dialogue_state_file_path):
            resp = requests.get(BASE, verify=False)
            state = resp.json()["dialogue_state"]
            with open(self.dialogue_state_file_path, 'w') as f:
                json.dump(state, f)
            self.animated_speech.say(self.voice_speed + "Welcome to CAIR!" + str(resp.json()["first_sentence"]), self.configuration)
            self.previous_sentence = "Welcome to CAIR!" + str(resp.json()["first_sentence"])
        else:
            self.animated_speech.say(self.voice_speed + "I missed you! What would you like to talk about?", self.configuration)
            self.previous_sentence = "I missed you! What would you like to talk about?"

        exit_keywords = ["stop talking", "quit the application"]
        repeat_keywords = ["repeat", "say it again"]
        end_keywords = ["over and out", "what about you", "what do you think"]

        # Loop until the user wants to stop the conversation
        while self.isAlive:
            time.sleep(0.1)
            self.sASR.startReco("English", False, True)
            self.setAutonomousAbilities(True, True, True, True, True)

            sentence = ""
            reco_speech = self.memory.getData(self.speech_reco_event)
            self.logger.info(str(reco_speech))
            stop = False

            while True:
                time.sleep(0.1)
                while not reco_speech:
                    time.sleep(0.1)
                    if sentence and any(end in sentence for end in end_keywords):
                        self.sASR.stopReco()
                        self.setAutonomousAbilities(False, True, True, True, True)
                        stop = True
                        break
                    reco_speech = self.memory.getData(self.speech_reco_event)
                    print reco_speech
                sys.stdout.flush()
                if stop:
                    break
                if sentence == "":
                    sep = ""
                else:
                    sep = " "

                # If something has been recognized
                if reco_speech:
                    sentence = sentence + sep + reco_speech[0][0]
                self.memory.insertData(self.speech_reco_event, [])
                reco_speech = self.memory.getData(self.speech_reco_event)

                # Reset repeat to false, otherwise it will always repeat the previous sentence
                self.repeat = False

                # If the user said one of the Exit Application keywords
                if sentence.lower() in exit_keywords:
                    self.isAlive = False
                    self.animated_speech.say(self.voice_speed + "Ok, thank you for talking with me! Goodbye.", self.configuration)
                    self.memory.insertData(self.speech_reco_event, [])
                    self.onInput_onStop()
                # If the user said a Repeat keyword
                elif sentence.lower() in repeat_keywords:
                    # If a previous sentence to repeat exists
                    if self.previous_sentence:
                        self.repeat = True
                        self.animated_speech.say(self.voice_speed + "Sure. I said: " + str(self.previous_sentence), self.configuration)
                    else:
                        self.animated_speech.say(self.voice_speed + "I'm sorry, I don't have anything to repeat.", self.configuration)

            # If the user does not want the robot to repeat something, send the sentence to the Cloud and process the response
            if not self.repeat:
                self.logger.info(str(sentence))
                self.memory.insertData(self.speech_reco_event, [])
                with open(self.dialogue_state_file_path, 'r') as f:
                    dialogue_state = json.load(f)
                encoded_data = json.dumps(dialogue_state).encode('utf-8')
                compressed_data = gzip.compress(encoded_data)
                response = requests.put(BASE, data=compressed_data, verify=False)
                # Retrieve and store the updated dialogue state
                dialogue_state = response.json()["dialogue_state"]
                with open(self.dialogue_state_file_path, 'w') as f:
                    dialogue_state = json.dump(dialogue_state, f)

                plan_sentence = response.json()['plan_sentence']
                plan = response.json()['plan']
                dialogue_sentence = response.json()['dialogue_sentence']

                # If there is no plan to execute, just say the dialogue_sentence of the server
                if not plan:
                    reply = plan_sentence + " " + dialogue_sentence
                    self.animated_speech.say(self.voice_speed + str(reply), self.configuration)
                    self.previous_sentence = str(reply)
                    self.logger.info(str(reply))
                # If there is a plan to execute, parse the actions of which it is composed and perform them
                else:
                    self.logger.info(str(plan))
                    # If the intent has a dialogue_sentence, say that before performing the action
                    if plan_sentence:
                        self.animated_speech.say(self.voice_speed + str(plan_sentence), self.configuration)
                        self.logger.info(str(plan_sentence))

                    plan_items = plan.split("#")[1:]
                    self.logger.info(plan_items)
                    # For each action in the plan, check which action is it and execute it (if the corresponding behavior is installed)
                    for item in plan_items:
                        item = item.encode('utf-8')
                        self.logger.info(item)
                        action = re.findall("action=(\w+)", item)[0]
                        self.logger.info(str(action))

                        if action == "volume":
                            if self.behavior_manager.isBehaviorInstalled("utility/volume"):
                                if self.tablet:
                                    self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/ExecutionMode.png")
                                level = re.findall("level=(\w+)", item)[0]
                                self.logger.info(str(level))
                                self.memory.insertData("CAIR/volume_level", str(level))
                                self.behavior_manager.runBehavior("utility/volume")
                                while self.behavior_manager.isBehaviorRunning("utility/volume"):
                                    time.sleep(0.1)
                            else:
                                self.animated_speech.say(self.voice_speed + self.not_installed_behavior, self.configuration)

                        elif action == "voicespeed":
                            if self.behavior_manager.isBehaviorInstalled("utility/voice_speed"):
                                if self.tablet:
                                    self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/ExecutionMode.png")
                                level = re.findall("level=(\w+)", item)[0]
                                self.logger.info(str(level))
                                self.memory.insertData("CAIR/voice_speed_level", str(level))
                                self.behavior_manager.runBehavior("utility/voice_speed")
                                while self.behavior_manager.isBehaviorRunning("utility/voice_speed"):
                                    time.sleep(0.1)
                                self.voice_speed = "\\RSPD=" + str(self.memory.getData("CAIR/voice_speed")) + "\\"
                            else:
                                self.animated_speech.say(self.voice_speed + self.not_installed_behavior, self.configuration)

                        elif action == "hello":
                            if self.behavior_manager.isBehaviorInstalled("greetings/hello"):
                                if self.tablet:
                                    self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/ExecutionMode.png")
                                x = threading.Thread(target=self.thread_function, args=(1,))
                                x.start()
                                self.behavior_manager.runBehavior("greetings/hello")
                                while self.behavior_manager.isBehaviorRunning("greetings/hello"):
                                    time.sleep(0.1)
                            else:
                                self.animated_speech.say(self.voice_speed + self.not_installed_behavior, self.configuration)

                        elif action == "namaste":
                            if self.behavior_manager.isBehaviorInstalled("greetings/namaste"):
                                if self.tablet:
                                    self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/ExecutionMode.png")
                                x = threading.Thread(target=self.thread_function, args=(2,))
                                x.start()
                                self.behavior_manager.runBehavior("greetings/namaste")
                                while self.behavior_manager.isBehaviorRunning("greetings/namaste"):
                                    time.sleep(0.1)
                            else:
                                self.animated_speech.say(self.voice_speed + self.not_installed_behavior, self.configuration)

                        elif action == "konnichiwa":
                            if self.behavior_manager.isBehaviorInstalled("greetings/konnichiwa"):
                                if self.tablet:
                                    self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/ExecutionMode.png")
                                x = threading.Thread(target=self.thread_function, args=(3,))
                                x.start()
                                self.behavior_manager.runBehavior("greetings/konnichiwa")
                                while self.behavior_manager.isBehaviorRunning("greetings/konnichiwa"):
                                    time.sleep(0.1)
                            else:
                                self.animated_speech.say(self.voice_speed + self.not_installed_behavior, self.configuration)

                        elif action == "time":
                            if self.behavior_manager.isBehaviorInstalled("timetools/time"):
                                if self.tablet:
                                    self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/ExecutionMode.png")
                                self.behavior_manager.runBehavior("timetools/time")
                                while self.behavior_manager.isBehaviorRunning("timetools/time"):
                                    time.sleep(0.1)
                            else:
                                self.animated_speech.say(self.voice_speed + self.not_installed_behavior, self.configuration)

                        elif action == "date":
                            if self.behavior_manager.isBehaviorInstalled("timetools/date"):
                                if self.tablet:
                                    self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/ExecutionMode.png")
                                self.behavior_manager.runBehavior("timetools/date")
                                while self.behavior_manager.isBehaviorRunning("timetools/date"):
                                    time.sleep(0.1)
                            else:
                                self.animated_speech.say(self.voice_speed + self.not_installed_behavior, self.configuration)

                        elif action == "weather":
                            if self.behavior_manager.isBehaviorInstalled("weatherforecast/weather"):
                                if self.tablet:
                                    self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/ExecutionMode.png")
                                city = re.findall("city=(.*)", item)[0]
                                self.logger.info(str(city))
                                self.memory.insertData("CAIR/weather_city", str(city))
                                self.behavior_manager.runBehavior("weatherforecast/weather")
                                while self.behavior_manager.isBehaviorRunning("weatherforecast/weather"):
                                    time.sleep(0.1)
                            else:
                                self.animated_speech.say(self.voice_speed + self.not_installed_behavior, self.configuration)

                        elif action == "playsong":
                            if self.behavior_manager.isBehaviorInstalled("musicplayer/play-song"):
                                if self.tablet:
                                    self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/ExecutionMode.png")
                                title = re.findall("title=(.*)", item)[0]
                                self.logger.info(str(title))
                                self.memory.insertData("CAIR/song_title", str(title))
                                self.behavior_manager.runBehavior("musicplayer/play-song")
                                while self.behavior_manager.isBehaviorRunning("musicplayer/play-song"):
                                    time.sleep(0.1)
                            else:
                                self.animated_speech.say(self.voice_speed + self.not_installed_behavior, self.configuration)

                        elif action == "playkaraoke":
                            if self.behavior_manager.isBehaviorInstalled("karaokeplayer/play-karaoke"):
                                if self.tablet:
                                    self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/ExecutionMode.png")
                                title = re.findall("title=(.*)", item)[0]
                                self.logger.info(str(title))
                                self.memory.insertData("CAIR/karaoke_title", str(title))
                                self.behavior_manager.runBehavior("karaokeplayer/play-karaoke")
                                while self.behavior_manager.isBehaviorRunning("karaokeplayer/play-karaoke"):
                                    time.sleep(0.1)
                            else:
                                self.animated_speech.say(self.voice_speed + self.not_installed_behavior, self.configuration)

                        elif action == "wikisearch":
                            if self.behavior_manager.isBehaviorInstalled("wordtools/wikisearch"):
                                if self.tablet:
                                    self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/ExecutionMode.png")
                                what = re.findall("what=(.*)", item)[0]
                                self.logger.info(str(what))
                                self.memory.insertData("CAIR/wikisearch", str(what))
                                self.behavior_manager.runBehavior("wordtools/wikisearch")
                                while self.behavior_manager.isBehaviorRunning("wordtools/wikisearch"):
                                    time.sleep(0.1)
                            else:
                                self.animated_speech.say(self.voice_speed + self.not_installed_behavior, self.configuration)

                        elif action == "translate":
                            if self.behavior_manager.isBehaviorInstalled("wordtools/translator"):
                                if self.tablet:
                                    self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/ExecutionMode.png")
                                language = re.findall("language=(\w+)", item)[0]
                                self.logger.info(str(language))
                                self.memory.insertData("CAIR/translate_lan", str(language))
                                what = re.findall("what=(.*)", plan)[0]
                                self.logger.info(str(what))
                                self.memory.insertData("CAIR/translate_text", str(what))
                                self.behavior_manager.runBehavior("wordtools/translator")
                                while self.behavior_manager.isBehaviorRunning("wordtools/translator"):
                                    time.sleep(0.1)
                            else:
                                self.animated_speech.say(self.voice_speed + self.not_installed_behavior, self.configuration)

                        elif action == "dictionary":
                            if self.behavior_manager.isBehaviorInstalled("wordtools/dictionary"):
                                if self.tablet:
                                    self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/ExecutionMode.png")
                                what = re.findall("what=(.*)", item)[0]
                                self.logger.info(str(what))
                                self.memory.insertData("CAIR/dictionary", str(what))
                                self.behavior_manager.runBehavior("wordtools/dictionary")
                                while self.behavior_manager.isBehaviorRunning("wordtools/dictionary"):
                                    time.sleep(0.1)
                            else:
                                self.animated_speech.say(self.voice_speed + self.not_installed_behavior, self.configuration)

                        elif action == "move":
                            if self.behavior_manager.isBehaviorInstalled("movement/move"):
                                if self.tablet:
                                    self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/ExecutionMode.png")
                                where = re.findall("where=(\w+)", item)[0]
                                self.logger.info(str(where))
                                self.memory.insertData("CAIR/move", str(where))
                                self.behavior_manager.runBehavior("movement/move")
                                while self.behavior_manager.isBehaviorRunning("movement/move"):
                                    time.sleep(0.1)
                            else:
                                self.animated_speech.say(self.voice_speed + self.not_installed_behavior, self.configuration)

                        elif action == "go":
                            if self.behavior_manager.isBehaviorInstalled("movement/move"):
                                if self.tablet:
                                    self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/ExecutionMode.png")
                                where = re.findall("where=(\w+)", item)[0]
                                self.logger.info(str(where))
                                self.memory.insertData("CAIR/go", str(where))
                                self.behavior_manager.runBehavior("movement/go")
                                while self.behavior_manager.isBehaviorRunning("movement/go"):
                                    time.sleep(0.1)
                            else:
                                self.animated_speech.say(self.voice_speed + self.not_installed_behavior, self.configuration)

                        elif action == "learnplace":
                            if self.behavior_manager.isBehaviorInstalled("movement/learn_place"):
                                if self.tablet:
                                    self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/ExecutionMode.png")
                                where = re.findall("where=(.*)", item)[0]
                                self.logger.info(str(where))
                                self.memory.insertData("CAIR/learn_place", str(where))
                                self.behavior_manager.runBehavior("movement/learn_place")
                                while self.behavior_manager.isBehaviorRunning("movement/learn_place"):
                                    time.sleep(0.1)
                            else:
                                self.animated_speech.say(self.voice_speed + self.not_installed_behavior, self.configuration)

                        elif action == "setposition":
                            if self.behavior_manager.isBehaviorInstalled("movement/set_position"):
                                if self.tablet:
                                    self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/ExecutionMode.png")
                                where = re.findall("where=(.*)", item)[0]
                                self.logger.info(str(where))
                                self.memory.insertData("CAIR/set_position", str(where))
                                self.behavior_manager.runBehavior("movement/set_position")
                                while self.behavior_manager.isBehaviorRunning("movement/set_position"):
                                    time.sleep(0.1)
                            else:
                                self.animated_speech.say(self.voice_speed + self.not_installed_behavior, self.configuration)

                        elif action == "goto":
                            if self.behavior_manager.isBehaviorInstalled("movement/go_to"):
                                if self.tablet:
                                    self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/ExecutionMode.png")
                                where = re.findall("where=(.*)", item)[0]
                                self.logger.info(str(where))
                                self.memory.insertData("CAIR/go_to", str(where))
                                self.behavior_manager.runBehavior("movement/go_to")
                                while self.behavior_manager.isBehaviorRunning("movement/go_to"):
                                    time.sleep(0.1)
                            else:
                                self.animated_speech.say(self.voice_speed + self.not_installed_behavior, self.configuration)

                        elif action == "rest":
                            # Check if the docking station was in the map
                            if self.memory.getData("CAIR/go_to_outcome"):
                                if self.tablet:
                                    if self.behavior_manager.isBehaviorInstalled("movement/rest"):
                                        # Execute this behavior only on Pepper.
                                        self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/PrivacyMode.png")
                                        self.behavior_manager.runBehavior("movement/rest")
                                        while self.behavior_manager.isBehaviorRunning("movement/rest"):
                                            time.sleep(0.1)
                                    else:
                                        self.animated_speech.say(self.voice_speed + self.not_installed_behavior, self.configuration)
                                self.memory.removeData("CAIR/go_to_outcome")

                        elif action == "wakeup":
                            if self.tablet:
                                if self.behavior_manager.isBehaviorInstalled("movement/wakeup"):
                                    # Execute this behavior only on Pepper.
                                    self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/ExecutionMode.png")
                                    self.behavior_manager.runBehavior("movement/wakeup")
                                    while self.behavior_manager.isBehaviorRunning("movement/wakeup"):
                                        time.sleep(0.1)
                                else:
                                    self.animated_speech.say(self.voice_speed + self.not_installed_behavior, self.configuration)

                        elif action == "forgetmap":
                            if self.behavior_manager.isBehaviorInstalled("movement/forget_map"):
                                if self.tablet:
                                    self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/ExecutionMode.png")
                                self.behavior_manager.runBehavior("movement/forget_map")
                                while self.behavior_manager.isBehaviorRunning("movement/forget_map"):
                                    time.sleep(0.1)
                            else:
                                self.animated_speech.say(self.voice_speed + self.not_installed_behavior, self.configuration)

                        elif action == "hug":
                            if self.behavior_manager.isBehaviorInstalled("affectivecommunication/hug"):
                                if self.tablet:
                                    self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/ExecutionMode.png")
                                self.behavior_manager.runBehavior("affectivecommunication/hug")
                                while self.behavior_manager.isBehaviorRunning("affectivecommunication/hug"):
                                    time.sleep(0.1)
                            else:
                                self.animated_speech.say(self.voice_speed + self.not_installed_behavior, self.configuration)

                        elif action == "handshake":
                            if self.behavior_manager.isBehaviorInstalled("affectivecommunication/handshake"):
                                if self.tablet:
                                    self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/ExecutionMode.png")
                                self.behavior_manager.runBehavior("affectivecommunication/handshake")
                                while self.behavior_manager.isBehaviorRunning("affectivecommunication/handshake"):
                                    time.sleep(0.1)
                            else:
                                self.animated_speech.say(self.voice_speed + self.not_installed_behavior, self.configuration)

                        elif action == "privacy":
                            if self.behavior_manager.isBehaviorInstalled("provideprivacy/privacy"):
                                if self.tablet:
                                    self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/PrivacyMode.png")
                                self.behavior_manager.runBehavior("provideprivacy/privacy")
                                while self.behavior_manager.isBehaviorRunning("provideprivacy/privacy"):
                                    time.sleep(0.1)
                            else:
                                self.animated_speech.say(self.voice_speed + self.not_installed_behavior, self.configuration)

                        elif action == "followme":
                            if self.behavior_manager.isBehaviorInstalled("follow-me/."):
                                if self.tablet:
                                    self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/ExecutionMode.png")
                                self.behavior_manager.runBehavior("follow-me/.")
                                while self.behavior_manager.isBehaviorRunning("follow-me/."):
                                    time.sleep(0.1)
                            else:
                                self.animated_speech.say(self.voice_speed + self.not_installed_behavior, self.configuration)

                        elif action == "playmovie":
                            if self.behavior_manager.isBehaviorInstalled("movieplayer/play-movie"):
                                if self.tablet:
                                    self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/ExecutionMode.png")
                                title = re.findall("title=(.*)", item)[0]
                                self.logger.info(str(title))
                                self.memory.insertData("CAIR/movie_title", str(title))
                                self.behavior_manager.runBehavior("movieplayer/play-movie")
                                while self.behavior_manager.isBehaviorRunning("movieplayer/play-movie"):
                                    time.sleep(0.1)
                            else:
                                self.animated_speech.say(self.voice_speed + self.not_installed_behavior, self.configuration)

                        elif action == "showinstructions":
                            if self.behavior_manager.isBehaviorInstalled("videoinstructions/show-instructions"):
                                if self.tablet:
                                    self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/ExecutionMode.png")
                                what = re.findall("what=(.*)", item)[0]
                                self.logger.info(str(what))
                                self.memory.insertData("CAIR/instructions", str(what))
                                self.behavior_manager.runBehavior("videoinstructions/show-instructions")
                                while self.behavior_manager.isBehaviorRunning("videoinstructions/show-instructions"):
                                    time.sleep(0.1)
                            else:
                                self.animated_speech.say(self.voice_speed + self.not_installed_behavior, self.configuration)

                        elif action == "showexercise":
                            if self.behavior_manager.isBehaviorInstalled("videoexercises/play-exercise"):
                                if self.tablet:
                                    self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/ExecutionMode.png")
                                what = re.findall("what=(.*)", item)[0]
                                self.logger.info(str(what))
                                self.memory.insertData("CAIR/exercise", str(what))
                                self.behavior_manager.runBehavior("videoexercises/play-exercise")
                                while self.behavior_manager.isBehaviorRunning("videoexercises/play-exercise"):
                                    time.sleep(0.1)
                            else:
                                self.animated_speech.say(self.voice_speed + self.not_installed_behavior, self.configuration)

                    # Once the execution of the plan is finished, set the dialogue mode image on the tablet
                    if self.tablet:
                        self.tablet_service.showImage("http://" + self.tablet_service.robotIp() + "/apps/dialoguemanager/img/DialogueMode.png")

                    # If there is a reply from the Cloud, say it after the plan has been executed
                    if reply:
                        self.animated_speech.say(self.voice_speed + str(reply), self.configuration)
                        self.previous_sentence = reply

    def onInput_onStop(self):
        if self.tablet:
            self.tablet_service.hideImage()
        self.al.setState("interactive")
        self.setAutonomousAbilities(True, True, True, True, True)
        # If present, delete the transformation - if the robot moves outside CAIR it is no more valid
        try:
            self.memory.removeData("CAIR/transformation_matrix")
            self.memory.removeData("CAIR/theta")
        except:
            self.logger.info("No transformation to delete in memory.")
            pass
        self.onStopped()
        self.onUnload()
        sys.exit(0)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>